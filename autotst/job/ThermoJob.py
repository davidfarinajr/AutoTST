from autotst.calculator.gaussian import read_log,write_input,Gaussian
from autotst.calculator.orca import Orca
from autotst.calculator.arkane_input import Arkane_Input
from autotst.calculator.HLCI import HLCI
from autotst.species import Species, Conformer
from autotst.geometry import Bond, Angle, Torsion, CisTrans, ChiralCenter
import cclib
from cclib.io import ccread
from rmgpy.molecule import Molecule as RMGMolecule
from rmgpy.species import Species as RMGSpecies
import rmgpy
from ase.calculators.gaussian import Gaussian as ASEGaussian
from ase.atoms import Atom, Atoms
import ase
import rdkit.Chem.rdDistGeom
import rdkit.DistanceGeometry
from rdkit.Chem.Pharm3D import EmbedLib
from rdkit.Chem import AllChem
from rdkit import Chem
import rdkit
import os
import time
import yaml
from shutil import move, copyfile, rmtree
import numpy as np
import pandas as pd
import subprocess
from subprocess import STDOUT, check_output, TimeoutExpired
import multiprocessing
from multiprocessing import Process, Manager
import logging
FORMAT = "%(filename)s:%(lineno)d %(funcName)s %(levelname)s %(message)s"
logging.basicConfig(format=FORMAT, level=logging.INFO)

def get_discovery_username():
    home = os.environ["HOME"]
    discovery_username = home.split('/')[-1]
    try:
        discovery_users = os.listdir('/scratch')
        if discovery_username not in discovery_users:
            logging.warning('It appears that {} is not a valid discovery username'.format(self.discovery_username))
    except:
        pass
    return discovery_username

def check_complete(label, user):
    """
    A method to determine if a job is still running
    """
    command = """squeue -n "{}" -u "{}" """.format(label,user)
    try:
        output = check_output(command, shell= True, timeout=20)
    except TimeoutExpired as e:
        logging.info(e)
        return False
    
    if len(output.decode("utf-8").splitlines()) <= 1:
        return True
    else:
        return False

def get_jobs_in_queue(user):
    """
    A method to determine number of user's jobs currently in the queue
    """
    command = """squeue -u "{}" """.format(user)
    try:
        output = check_output(command, shell= True, timeout=20)
    except TimeoutExpired as e:
        time.sleep(300)
        output = get_jobs_in_queue(user)

    jobs = len(output.decode("utf-8").splitlines()) - 2
    return jobs

def check_isomorphic(conformer,log_path):
    """
    Compares whatever is in the log file  
    to the SMILES of the passed in 'conformer'
    """
    starting_molecule = RMGMolecule(smiles=conformer.smiles)
    starting_molecule = starting_molecule.to_single_bonds()

    atoms = read_log(log_path)

    test_molecule = RMGMolecule()
    test_molecule.from_xyz(
        atoms.arrays["numbers"],
        atoms.arrays["positions"]
    )
    if not starting_molecule.is_isomorphic(test_molecule):
        logging.info(
            "Output geometry of {} is not isomorphic with input geometry".format(log_path))
        return False
    else:
        logging.info(
        "{} was successful and was validated!".format(log_path))
        return True

class ThermoJob():
    """
    A class to deal with the input and output of calculations
    """

    def __init__(
            self,
            species=None,
            calculator=None,
            conformer_calculator = None, # an ASE Calculator object
            partition="general", # The partition to run calculations on
            discovery_username= None, # discovery user account (for checking on jobs in the queue)
            directory = None, # where to save your files 
            scratch = None # a directory for temporary files generated by calculators
            ):

        self.discovery_username = discovery_username
        if self.discovery_username is None:
            self.discovery_username = get_discovery_username()

        assert isinstance(species,Species),'Species must be an AutoTST species, {} was provided'.format(type(species))
        self.species = species 

        self.calculator = calculator
        self.sp_calculator = None
        self.method_name = calculator.opt_method
        if self.calculator:
            if directory is None:
                logging.info("Job directory not specified...setting Job directory to calculator directory")
                self.directory = self.calculator.directory
            else:
                logging.info("Setting calculator directory to Job directory")
                self.directory = self.calculator.directory = directory
            if scratch is None:
                logging.info("Job scratch directory not specified...setting Job scratch to calculator scratch")
                self.scratch = self.calculator.scratch
            else:
                logging.info("Setting calculator scratch to Job scratch")
                self.scratch = self.calculator.scratch = scratch
        else:
            logging.info("No calculator specified")
            if directory is None:
                logging.info("No directory specified...setting directory to .")
                self.directory = '.'
            else:
                self.directory = directory
            if scratch is None:
                logging.info("No scratch directory specified...setting scratch to .")
                self.scratch = '.'
            else:
                self.scratch = scratch

        self.conformer_calculator = conformer_calculator
        if self.conformer_calculator:
            self.conformer_calculator.directory = self.scratch
            
        self.partition = partition

        manager = multiprocessing.Manager()
        global results
        results = manager.dict()

        if self.scratch and not os.path.exists(self.scratch):
            os.makedirs(self.scratch)
        if self.directory and not os.path.exists(self.directory):
            os.makedirs(self.directory)

        self.rmg_mol = None

    def __repr__(self):
        return "< ThermoJob '{}'>".format(self.species)

    def _submit_conformer(self, conformer, calc, restart=False):
        """
        A methods to submit a job based on the calculator and partition provided
        """
        assert conformer, "Please provide a conformer to submit a job"

        write_input(conformer, calc)
        label = calc.label
        log_path = os.path.join(calc.scratch,label + '.log')
        gaussian_scratch = '/scratch/westgroup/GAUSS_SCRDIR/'
        os.environ['GAUSS_SCRDIR'] = gaussian_scratch
        if not os.path.exists(gaussian_scratch):
            os.makedirs(gaussian_scratch)

        os.environ["COMMAND"] = self.calculator.command  # only using gaussian for now
        os.environ["FILE_PATH"] = label
        
        attempted = False
        if os.path.exists(log_path):
            attempted = True
            if not restart:
                logging.info(
                    "It appears that this job has already been run, not running it a second time.")

        if not check_complete(label=label, user=self.discovery_username):
            logging.info("It appears that {} is already in the queue...not submitting".format(label))
            return label

        if restart or not attempted:
            if restart:
                logging.info(
                    "Restarting calculations for {}.".format(conformer)
                )
            else:
                logging.info("Starting calculations for {}".format(conformer))

            output = subprocess.check_output(
                """sbatch --exclude=c5003 --job-name="{0}" --output="{0}.log" --error="{0}.slurm.log" -p {1} -N 1 -n {2} -t {3} --mem={4} $AUTOTST/autotst/job/submit.sh""".format(
                    label,calc.parameters["partition"],calc.parameters["nprocshared"],calc.parameters["time"],calc.parameters["mem"]), shell=True, cwd=calc.scratch, stderr=STDOUT
                    ).decode("utf-8")  
            
            if 'Job violates accounting/QOS policy' in output:
                number_of_jobs =  self.get_jobs_in_queue(self.discovery_username)
                time.sleep(300)
                jobs = self.get_jobs_in_queue(self.discovery_username)
                while jobs >= number_of_jobs:
                    time.sleep(300)
                    jobs = self.get_jobs_in_queue(self.discovery_username)
                self._submit_conformer(conformer, calc, restart)
            
        return label


    def calculate_conformer(self, conformer):
        """
        A method that optimizes a conformer and performs frequency analysis.
        If the conformer does not convergenge with tight convergence criteria,
        the convergence criteria is loosened to Gaussian's default criteria,
        and the optimization is rerun using the geometry from the last step of the Tight convergence optimization.
        Returns True if Gaussian log is complete and converged, and False if incomplete of unconverged.
        """

        self.calculator.conformer = conformer
        #self.calculator.settings["convergence"] = "Tight"
        calc = self.calculator.get_conformer_calc()
        label = calc.label
        log_path = os.path.join(calc.scratch,calc.label + ".log")
        logging.info(
            "Submitting conformer calculation for {}".format(calc.label))
        label = self._submit_conformer(conformer,calc)
        time.sleep(15)
        while not check_complete(label=label,user=self.discovery_username):
            time.sleep(300)

        complete, converged = self.calculator.verify_output_file(log_path)

        if not complete:
            logging.info(
                "It seems that the file never completed for {} completed, running it again".format(calc.label))
            calc.parameters["time"] = "24:00:00"
            calc.parameters["mem"] = "30GB"
            calc.parameters["nprocshared"] = 8
            label = self._submit_conformer(conformer,calc,restart=True)
            time.sleep(60)
            while not check_complete(label=label,user=self.discovery_username):
                time.sleep(300)

            complete, converged = self.calculator.verify_output_file(log_path)


        if (complete and converged):
            return check_isomorphic(conformer=conformer,log_path=log_path)

        if not complete: # try again
            logging.info(
                "It appears that {} was killed prematurely".format(calc.label))
            calc.parameters["time"] = "24:00:00"
            calc.parameters["nprocshared"] = 8
            calc.parameters["mem"] = '30GB'
            label = self._submit_conformer(conformer,calc, restart=True)
            time.sleep(60)
            while not check_complete(label=label,user=self.discovery_username):
                time.sleep(300)

            complete, converged = self.calculator.verify_output_file(log_path)
            if (complete and converged):
                return check_isomorphic(conformer=conformer,log_path=log_path)
            elif not complete:
                logging.info(
                    "It appears that {} was killed prematurely or never completed :(".format(calc.label))
                return False

        if not converged:

            if self.calculator.settings["convergence"] not in ["verytight", "tight"]:
                logging.info("{} did not converge".format(calc.label))
                return False
    
            logging.info("{} did not converge, trying it as a looser convergence criteria".format(calc.label))

            logging.info("Resubmitting {} with default convergence criteria".format(conformer))
            try:
                atoms = read_log(log_path)
                conformer._ase_molecule = atoms
                conformer.update_coords_from("ase")
            except:
                pass
            logging.info("Removing the old log file that didn't converge, restarting from last geometry")
            os.remove(log_path)
            self.calculator.conformer = conformer
            self.calculator.settings["convergence"] = ""
            calc = self.calculator.get_conformer_calc()

            label = self._submit_conformer(conformer,calc)
            time.sleep(60)
            while not check_complete(label=label,user=self.discovery_username):
                time.sleep(300)

            if not os.path.exists(log_path):
                logging.info(
                "It seems that {}'s loose optimization was never run...".format(calc.label))
                return False

            complete, converged = self.calculator.verify_output_file(log_path)

            if not complete:
                logging.info(
                "It appears that {} was killed prematurely or never completed :(".format(calc.label))
                return False

            elif not converged:
                logging.info("{} failed second QM optimization :(".format(calc.label))
                return False

            else:
                return check_isomorphic(conformer=conformer,log_path=log_path)

        raise Exception("Shoudn't reach here")

    def calculate_sp(self,conformer,sp_method):
        
        method_name = self.method_name
        self.calculator.conformer = conformer
        self.calculator.settings["convergence"] = "TIGHT"
        self.calculator.settings["sp"] = sp_method
        calc = self.calculator.get_sp_calc()
        calc.scratch = calc.directory = os.path.join(
            self.directory,
            "species",
            method_name,
            conformer.smiles,
            "sp")
        calc.label = "{}_{}".format(conformer.smiles, sp_method)
        label = calc.label
        log_path = os.path.join(calc.scratch,calc.label + ".log")
        logging.info(
            "Submitting {} calculation".format(calc.label))
        label = self._submit_conformer(conformer,calc)
        time.sleep(60)
        while not check_complete(label=label,user=self.discovery_username):
            time.sleep(300)

        complete, converged = self.calculator.verify_output_file(log_path)

        if (complete and converged):
            return True

        if not complete: # try again
            logging.info(
                "It appears that {} was killed prematurely".format(calc.label))
            calc.parameters["time"] = "24:00:00"
            calc.parameters["nprocshared"] = 16
            calc.parameters["mem"] = "300Gb"
            label = self._submit_conformer(conformer,calc, restart=True)
            time.sleep(60)
            while not check_complete(label=label,user=self.discovery_username):
                time.sleep(300)

            complete, converged = self.calculator.verify_output_file(log_path)
            
            if (complete and converged):
                logging.info("{} completed!".format(label))
                return True
            elif not complete:
                logging.info(
                    "It appears that {} was killed prematurely or never completed :(".format(calc.label))
                return False
            # else complete but not converged

        if not converged:
            logging.info("{} did not converge, trying it as a looser convergence criteria".format(calc.label))
            logging.info("Resubmitting {} with default convergence criteria".format(conformer))
            atoms = read_log(log_path)
            conformer._ase_molecule = atoms
            conformer.update_coords_from("ase")
            self.calculator.conformer = conformer
            self.calculator.settings["convergence"] = ""
            calc = self.calculator.get_sp_calc()
            calc.scratch = calc.directory = os.path.join(
                self.directory,
                "species",
                method_name,
                conformer.smiles,
                "sp"
            )
            calc.label = "{}_{}".format(conformer.smiles, sp_method)
            logging.info("Removing the old log file that didn't converge, restarting from last geometry")
            os.remove(log_path)

            label = self._submit_conformer(conformer,calc)
            time.sleep(60)
            while not check_complete(label=label,user=self.discovery_username):
                time.sleep(300)

            if not os.path.exists(log_path):
                logging.info(
                "It seems that {}'s loose optimization was never run...".format(calc.label))
                return False

            complete, converged = self.calculator.verify_output_file(log_path)
            
            if (complete and converged):
                logging.info("{} completed!".format(label))
                return True
            
            elif not complete:
                logging.info(
                    "It appears that {} was killed prematurely".format(calc.label))
                calc.parameters["time"] = "24:00:00"
                calc.parameters["nprocshared"] = 16
                calc.parameters["mem"] = "300Gb"
                label = self._submit_conformer(conformer,calc, restart=True)
                time.sleep(60)
                while not check_complete(label=label,user=self.discovery_username):
                    time.sleep(300)

                complete, converged = self.calculator.verify_output_file(log_path)
            
                if (complete and converged):
                    logging.info("{} completed!".format(label))
                    return True
                elif not complete:
                    logging.info(
                        "It appears that {} was killed prematurely or never completed :(".format(calc.label))
                    return False
                elif not converged:
                    logging.info("{} failed second QM optimization :(".format(calc.label))
                    return False

            elif not converged:
                logging.info("{} failed second QM optimization :(".format(calc.label))
                return False
     

    def _calculate_fod(self,conformer,method_name):
        """
        Runs finite temperaure DFT to determine the Fractional Occupation number weighted Density (FOD number).
        Uses Orca's the default functional, basis set, and smear temperature (TPSS, def2-TZVP, 5000 K).
        """
        # specify a directory for FOD input and output
        fod_dir = os.path.join(self.directory, "species",method_name, conformer.smiles, "fod")
        dir = os.path.join(self.directory, "species", method_name,
                            conformer.smiles)
        label = conformer.smiles + "_fod"

        if not os.path.exists(fod_dir):
            os.makedirs(fod_dir)

        # Get orca calculator instance 
        # for lowest energy conformer
        orca_calc = Orca(directory=fod_dir,conformer=conformer)
        orca_calc.write_fod_input()

        # Assign FOD label for calulation and filepath 
        # to save input and output
        file_path = os.path.join(fod_dir, label)

        # Assign environment variables with orca command and path
        os.environ["label"] = label

        # Do not run orca if log file is already there
        attempted = False
        complete = False

        if os.path.exists(file_path + ".log") or os.path.exists(os.path.join(dir, label + ".log")):
            attempted = True
            logging.info(
                "It appears that this job has already been run")
            if os.path.exists(os.path.join(dir, label + ".log")):
                if orca_calc.check_NormalTermination(os.path.join(dir, label + ".log")):
                    complete = True
                    logging.info("The FOD calculation completed!")
                    return True
            elif os.path.exists(file_path + ".log"):
                if orca_calc.check_NormalTermination(file_path + ".log"):
                    complete = True
                    logging.info("The FOD calculation completed!")
                    copyfile(
                        file_path + ".log", os.path.join(dir, label + ".log"))
                    return True
            else:
                logging.info("It appears the FOD job did not terminate normally! Trying FOD job again")
                complete = False

        # In log file does not exist, run Orca
        if not attempted or not complete:
            logging.info(
                "Starting FOD calculation for {}".format(conformer))
            subprocess.Popen(
                """sbatch --exclude=c5003,c3040 --job-name="{0}" --output="{0}.log" --error="{0}.slurm.log" -p test,general -N 1 -n 4 -t 10:00 --mem=5GB $AUTOTST/autotst/job/orca_submit.sh""".format(
                    label), shell=True, cwd=orca_calc.directory)
            time.sleep(60)
        # wait unitl the job is done
        while not check_complete(label=label, user=self.discovery_username):
            time.sleep(300)

        # If the log file exits, check to see if it terminated normally
        if os.path.exists(file_path + ".log"):
            if orca_calc.check_NormalTermination(file_path + ".log"):
                logging.info("The FOD calculation completed! The FOD log file is {}".format(
                    file_path + ".log"))
                copyfile(
                    file_path + ".log", os.path.join(dir, label + ".log"))
                return True
            else:
                logging.info("It appears the FOD job did not terminate normally! The FOD log file is {}".format(
                    file_path + ".log"))
                return False
        else:
            logging.info("It appears the FOD orca job never ran")
            return False

################## rotor methods #############################################
    def submit_rotor(self, conformer, torsion_index, restart=False):

        """
        A methods to submit a job based on the conformer and the index of the torsion
        """
        assert conformer, "Please provide a conformer to submit a job"
        self.calculator.conformer = conformer
        ase_calculator = self.calculator.get_rotor_calc(torsion_index)

        copy_molecule = conformer.rmg_molecule.copy()
        copy_molecule.delete_hydrogens()
        number_of_atoms = len(copy_molecule.atoms)
        if number_of_atoms >= 4:
            nproc = 2
        elif number_of_atoms >= 7:
            nproc = 4
        elif number_of_atoms >= 9:
            nproc = 6
        else:
            nproc = 8

        self.write_input(conformer, ase_calculator)
        label = ase_calculator.label
        file_path = os.path.join(ase_calculator.scratch, ase_calculator.label)

        os.environ["COMMAND"] = "g16"  # only using gaussian for now
        os.environ["FILE_PATH"] = label

        attempted = False
        if os.path.exists(log_path):
            attempted = True
            if not restart:
                logging.info(
                    "It appears that this job has already been run, not running it a second time.")

        if not check_complete(label=label, user=self.discovery_username):
            logging.info("It appears that {} is already in the queue...not submitting".format(label))
            return label

        if restart or not attempted:
            if restart:
                logging.info(
                    "Restarting calculations for {}.".format(conformer)
                )
            else:
                logging.info("Starting calculations for {}".format(conformer))

            output = subprocess.check_output(
                """sbatch --exclude=c5003 --job-name="{0}" --output="{0}.log" --error="{0}.slurm.log" -p {1} -N 1 -n {2} -t {3} --mem={4} $AUTOTST/autotst/job/submit.sh""".format(
                    label,calc.parameters["partition"],calc.parameters["nprocshared"],calc.parameters["time"],calc.parameters["mem"]), shell=True, cwd=calc.scratch, stderr=STDOUT
                    ).decode("utf-8")  
            
            if 'Job violates accounting/QOS policy' in output:
                number_of_jobs =  self.get_jobs_in_queue(self.discovery_username)
                time.sleep(300)
                jobs = self.get_jobs_in_queue(self.discovery_username)
                while jobs >= number_of_jobs:
                    time.sleep(300)
                    jobs = self.get_jobs_in_queue(self.discovery_username)
                self._submit_conformer(conformer, calc, restart)

        return label

    def calculate_rotors(self, conformer, steps=36, step_size=10.0):

        complete = {}
        calculators = {}
        verified = {}
        if len(conformer.torsions) == 0:
            logging.info("No torsions to run scans on.")
            return {}

        for torsion in conformer.torsions:
            ase_calculator = self.calculator.get_rotor_calc(
                torsion_index)
            label = self._submit_conformer(
                conformer, ase_calculator)
            logging.info(label)
            complete[label] = False
            verified[label] = False

        done = False
        lowest_energy_label = None
        conformer_error = False

        while not done:
            for label in list(complete.keys()):
                if not self.check_complete(label):
                    continue
                if done:
                    continue
                complete[label] = True
                lowest_conf, continuous = self.verify_rotor(
                    conformer, label)
                if all([lowest_conf, continuous]):
                    verified[label] = True
                else:
                    verified[label] = False

                if not lowest_conf:
                    done = True
                    lowest_energy_label = label
                    conformer_error = True
                    continue
                elif all(complete.values()):
                    done = True

        if conformer_error:
            logging.info(
                "A lower energy conformer was found... Going to optimize this insted")
            for label in list(complete.keys()):
                subprocess.call(
                    """scancel -n '{}'""".format(label), shell=True)
            if isinstance(conformer, TS):
                t = "ts"
                label = conformer.reaction_label
                file_name = os.path.join(
                    self.directory, t, label, "rotors", lowest_energy_label + ".log")
                t = "ts"
                direction = conformer.direction
            else:
                t = "species"
                label = conformer.smiles
                file_name = os.path.join(
                    self.directory, t, self.method_name, label,"rotors", lowest_energy_label + ".log")

                direction = None

            atoms = self.read_log(file_name)
            conformer._ase_molecule = atoms
            conformer.update_coords_from("ase")
            for index in ["X", "Y", "Z"]:
                # we do this because we now have a new conformer
                # the index starts at X and if another lower energy conformer arrises, we go to Y and so on
                if index != conformer.index:
                    logging.info(
                        "Setting index of {} to {}...".format(conformer, index))
                    conformer.index = index
                    break

            label = self.submit_conformer(conformer)

            while not self.check_complete(label):
                time.sleep(300)

            logging.info(
                "Reoptimization complete... performing hindered rotors scans again")

            if direction:
                file_name = "{}_{}_{}.log".format(
                    label, direction, conformer.index)
            else:
                file_name = "{}_{}.log".format(label, conformer.index)

            file_path = os.path.join(
                self.directory, t, self.method_name, label, "conformers", file_name
            )
            complete, converged = self.calculator.verify_output_file(file_path)
            if not converged:
                logging.info(
                    "The new geometry was unable to converge... Hindered rotor calculations failed... :(")
                for key in verified.keys():
                    verified[key] = False
                return verified
            logging.info(
                "The new geometry was able to successfully converge. Reattempting hindered rotor calculations")
            shutil.copyfile(
                file_path,
                os.path.join(self.directory, t, self.method_name, label, "{}.log".format(label))
            )
            conformer._ase_molecule = self.read_log(file_path)
            conformer.update_coords_from("ase")

            return self.calculate_rotors(conformer, steps, step_size)

        else:
            for label, boolean in list(verified.items()):
                if not boolean:
                    try:
                        if isinstance(conformer, TS):
                            file_path = os.path.join(
                                self.directory, "ts", conformer.reaction_label, "rotors")
                        else:
                            file_path = os.path.join(
                                self.directory, "species", self.method_name,conformer.smiles, "rotors")

                        os.mkdirs(os.path.join(file_path, failures))
                    except:
                        pass
                    shutil.move(
                        os.path.join(file_path, label + ".log"),
                        os.path.join(file_path, "failures",
                                     label + ".log")
                    )
            return verified

    def verify_rotor(self, conformer, label, steps=36, step_size=10.0):
        """
        A method that will 
        """

        if isinstance(conformer, TS):
            file_name = os.path.join(
                self.directory, "ts", conformer.reaction_label, "rotors", label + ".log")
        elif isinstance(conformer, Conformer):
             file_name = os.path.join(
                 self.directory, "species", self.method_name,conformer.smiles, "rotors", label + ".log")
        parser = cclib.io.ccread(file_name, loglevel=logging.ERROR)

        continuous = self.check_rotor_continuous(
            steps, step_size, parser=parser)
        [lowest_conf, energy, atomnos,
            atomcoords] = self.check_rotor_lowest_conf(parser=parser)
        #opt_count_check = self.check_rotor_opts(steps, parser=parser)
        #good_slope = self.check_rotor_slope(steps, step_size, parser=parser)

        # , good_slope, opt_count_check] ### Previously used, but the second two checks were deemed unecessary
        return [lowest_conf, continuous]

    def check_rotor_opts(self, steps, parser):

        #opt_indices = [i for i, status in enumerate(parser.optstatus) if status==2]
        opt_indices = [i for i, status in enumerate(
            parser.optstatus) if status > 1]
        opt_SCFEnergies = [parser.scfenergies[index] for index in opt_indices]

        n_opts_check = (steps + 1) == len(opt_SCFEnergies)

        return n_opts_check

    def check_rotor_slope(self, steps, step_size, parser, tol=0.1):

        opt_indices = [i for i, status in enumerate(
            parser.optstatus) if status in [2, 4]]
        opt_SCFEnergies = [parser.scfenergies[index] for index in opt_indices]

        max_energy = max(opt_SCFEnergies)
        min_energy = min(opt_SCFEnergies)

        max_slope = (max_energy - min_energy) / step_size
        slope_tol = tol*max_slope

        for i, energy in enumerate(opt_SCFEnergies):
            prev_energy = opt_SCFEnergies[i-1]
            slope = np.absolute((energy-prev_energy)/float(step_size))
            if slope > slope_tol:
                return False

        return True

    def check_rotor_continuous(self, steps, step_size, parser, tol=0.1):
        """
        A function that will check if a hindered rotor scan is continuous given the following:
        - steps (int): the number of steps performed in the scan (often 36)
        - step_size (float): the number of degress between each of the steps (often 10.0)
        - parser (cclib.parser.data.ccData_optdone_bool): the cclib parser that contains all of the info from the hindered rotor scan
        """

        assert isinstance(step_size, float)

        opt_indices = [i for i, status in enumerate(
            parser.optstatus) if status in [2, 4]]
        opt_SCFEnergies = [parser.scfenergies[index] for index in opt_indices]

        max_energy = max(opt_SCFEnergies)
        min_energy = min(opt_SCFEnergies)
        energy_tol = np.absolute(tol*(max_energy - min_energy))

        checked = [None for angle in range(0, 360)]

        continuous = True

        for step, energy in enumerate(opt_SCFEnergies):
            abs_theta = int(step*step_size)
            theta = abs_theta % 360

            mismatch = False

            if checked[theta] is None:
                checked[theta] = energy

            else:
                checked_energy = checked[theta]

                abs_diff = np.absolute(energy - checked_energy)

                if abs_diff > energy_tol:
                    mismatch = True
                    continuous = False
                    return False

        return continuous

    def check_rotor_lowest_conf(self, parser, tol=0.1):

        opt_indices = [i for i, status in enumerate(
            parser.optstatus) if status in [2, 4]]
        opt_SCFEnergies = [parser.scfenergies[index] for index in opt_indices]

        max_energy = max(opt_SCFEnergies)
        min_energy = min(opt_SCFEnergies)
        energy_tol = tol*(max_energy - min_energy)

        first_is_lowest = True  # Therefore...
        min_idx = 0
        min_energy = opt_SCFEnergies[min_idx]

        for i, energy in enumerate(opt_SCFEnergies):
            if min_energy - energy > energy_tol:
                min_energy = energy
                min_idx = i

        if min_idx != 0:
            first_is_lowest = False

        min_opt_idx = opt_indices[min_idx]

        atomnos = parser.atomnos
        atomcoords = parser.atomcoords[min_opt_idx]

        return [first_is_lowest, min_energy, atomnos, atomcoords]

################## rotor methods #############################################

    def calculate_species(self, 
                          options = {
                            "optimize" : True,
                            "rotors" : True,
                            "run_sp" : True,
                            "recalculate" : False,
                            "calculate_fod" : False,
                            "delta" : float(120),
                            "vary_multiplicity" : False,
                            "rmsd_cutoff" : 0.1,
                            "energy_cutoff" : 20,
                            "max_conformers" : None,
                            "run_arkane_dft" : False,
                            "run_arkane_sp": True,
                            "use_atom_corrections": True,
                            "use_bond_corrections": True,
                            "use_isodesmic_reactions": False,
                            "dir_path": None}
                          ):
        """
        Calculates the energy and harmonic frequencies of the lowest energy conformer of a species:
        1) Systematically generates low energy conformers for a given species with an ASE calculator.
        2) Optimizes each low energy conformer with provided Gaussian AutoTST calculator.
        3) Saves the gaussian optimization and frequency analysis log file for the lowest energy conformer of the species.
        """
        species = self.species
        method = self.calculator.settings['method'].upper()
        basis_set = self.calculator.settings['basis'].upper()
        method_name = self.method_name
        smiles = self.species.smiles[0]

        if options["dir_path"]:
            dest2 = os.path.join(options["dir_path"],self.method_name)
            if not os.path.exists(dest2):
                os.makedirs(dest2)
        else:
            dest2 = None
        
        label = "{}_{}_optfreq".format(smiles, method_name)
        log_path = os.path.join(self.calculator.directory,
                                "species", method_name, smiles, label+".log")
        ref_conformer = self.species.conformers[smiles][0]

        if options["optimize"]:
            sp_dir = os.path.join(self.calculator.directory,"species",method_name,smiles,'sp')
            if not os.path.exists(log_path):
                got_one = False
            if os.path.exists(log_path) and not options["recalculate"]:
                logging.info('It appears we already calculated this species')
                logging.info('Checking to see if the log is complete and converge...')
                complete, converged = self.calculator.verify_output_file(log_path)
                
                if (complete and converged):
                    logging.info('creating a sample conformer for isomorphism test...')
                    conf = Conformer(smiles=smiles)
                    if check_isomorphic(conformer=conf, log_path=log_path):
                        got_one = True
                        logging.info('The existing log has been verified')
                    else:
                        got_one = False
                        logging.info('removing existing log and restarting calculation...')
                        os.remove(log_path)
                        if os.path.exists(sp_dir):
                            rmtree(sp_dir)
                    
                else:
                    got_one = False
                    logging.info('the existing log did not complete or converge')
                    logging.info('removing existing log and restarting calculation...')
                    os.remove(log_path)
                    if os.path.exists(sp_dir):
                        rmtree(sp_dir)

            if (options["recalculate"] is False) and (got_one is True):
                logging.info("It appears we have already optimized {}".format(species))
            else:
                logging.info("Calculating geometries for {}".format(species))

                if self.conformer_calculator:
                    species.generate_conformers(
                        ase_calculator=self.conformer_calculator,
                        delta = options['delta'],
                        rmsd_cutoff = options['rmsd_cutoff'],
                        energy_cutoff = options['energy_cutoff'],
                        max_conformers = options["max_conformers"], 
                        multiplicity = options["vary_multiplicity"])

                currently_running = []
                processes = {}
                
                for conformer in species.conformers[smiles]:
                    process = Process(target=self.calculate_conformer, args=
                        (conformer,))
                    processes[process.name] = process

                for name, process in list(processes.items()):
                    process.start()
                    currently_running.append(name)

                while len(currently_running) > 0:
                    for name, process in list(processes.items()):
                        if not (name in currently_running):
                            continue
                        if not process.is_alive():
                            currently_running.remove(name)
                    time.sleep(15)

                results = []

                for conformer in list(species.conformers[smiles]):
                    scratch_dir = os.path.join(
                        self.directory,
                        "species",
                        method_name,
                        conformer.smiles,
                        "conformers"
                    )
                    f = "{}_{}_{}_optfreq.log".format(conformer.smiles, conformer.index, method_name)
                    path = os.path.join(scratch_dir, f)
                    if not os.path.exists(path):
                        logging.info(
                            "It seems that {} was never run...".format(f))
                        continue
                    try:
                        atoms = read_log(path)
                        conformer._ase_molecule = atoms
                        conformer.update_coords_from("ase")
                        complete, converged = self.calculator.verify_output_file(path)
                        if not all([complete, converged]): 
                            logging.info("It appears {} is incomplete or did not converge".format(f))
                            continue
                        parser = ccread(path, loglevel=logging.ERROR)
                        if not check_isomorphic(conformer=conformer,log_path=path):
                            logging.info("{}_{} is not isomorphic with starting species".format(conformer.smiles, conformer.index))
                            continue
                        if parser is None:
                            logging.info(
                                "Something went wrong when reading in results for {} using cclib...".format(f))
                            continue
                        energy = parser.scfenergies[-1]
                    except:
                        logging.info(
                            "The parser does not have an scf energies attribute, we are not considering {}".format(f))
                        continue

                    results.append([energy, conformer, f])

                results = pd.DataFrame(
                    results, columns=["energy", "conformer", "file"]).sort_values("energy").reset_index()

                if results.shape[0] == 0:
                    logging.info(
                        "No conformer for {} was successfully calculated... :(".format(species))
                    return False
                
                conformer = results['conformer'][0]
                lowest_energy_file = results['file'][0]

                # for index in range(results.shape[0]):
                #     conformer = results.conformer[index]
                #     lowest_energy_file = results.file[index]
                #     break

                logging.info(
                    "The lowest energy conformer is {}".format(lowest_energy_file))

                lowest_energy_file_path = os.path.join(self.calculator.directory, "species",method_name, conformer.smiles,"conformers",lowest_energy_file)
                label =  "{}_{}_optfreq".format(conformer.smiles,method_name)
                dest = os.path.join(self.calculator.directory,"species",method_name,conformer.smiles,label+".log")

                try:
                    copyfile(lowest_energy_file_path,dest)
                except IOError:
                    os.makedirs(os.path.dirname(dest))
                    copyfile(lowest_energy_file_path,dest)

                logging.info("The lowest energy file is {}! :)".format(
                    lowest_energy_file))

                # parser = ccread(dest, loglevel=logging.ERROR)

                
                # xyzpath = os.path.join(self.calculator.directory,"species",method_name,conformer.smiles,label+".xyz")
                # parser.writexyz(xyzpath)

                # logging.info("The lowest energy xyz file is {}!".format(
                #     xyzpath))

        if len(self.species.smiles) > 1 and os.path.exists(log_path):
            # Determine "best" Lewis structure from NBO calcuation
            logging.info("There are multiple resonance structures for {}".format(self.species))
            # Check for existing nbo log
            nbo_dir = os.path.join(self.directory,"species",method_name,smiles,"nbo")
            nbo_log = os.path.join(nbo_dir,smiles+'_nbo.log')

            if os.path.exists(nbo_log):
                logging.info("NBO has already been calculated")
                try:
                    logging.info("Attempting to determine Lewis structure from NBO log")
                    mol = self.calculator.read_nbo_log(nbo_log, nbo_dir)
                except:
                    logging.info(
                        "Could not determing Lewis Structure from NBO calculation")
                    logging.info("Trying HCLI to determing best Lewis Structure")
                    try:
                        spcs = RMGSpecies().from_smiles(smiles)
                        spcs.generate_resonance_structures(
                            keep_isomorphic=False)
                        hlci = HLCI(spcs)
                        index = hlci.w.index(max(hlci.w))
                        mol = HLCI(spcs).species.molecule[index]
                    except:
                        mol = self.species.rmg_species[0]
                        logging.info(
                            "Could not determine best Lewis struture for species {}...using {} for structure".format(self.species,mol.smiles))
    
                logging.info("the best smiles for {} is {}".format(
                    self.species, mol.smiles))
                best_smiles = mol.smiles
                self.rmg_mol = mol

            else:
                logging.info(
                    "Performing NBO calculation to determine best Lewis structure for {}".format(self.species))
                atoms = read_log(log_path)
                ref_conformer._ase_molecule = atoms
                ref_conformer.update_coords_from("ase")
                self.calculator.conformer = ref_conformer
                calc = self.calculator.get_nbo_calc()
                label = calc.label
                nbo_path = os.path.join(calc.scratch, calc.label + ".log")
                logging.info(
                    "Submitting conformer calculation for {}".format(calc.label))
                label = self._submit_conformer(ref_conformer, calc)
                time.sleep(60)
                while not check_complete(label=label, user=self.discovery_username):
                    time.sleep(300)

                complete, converged = self.calculator.verify_output_file(log_path)

                try:
                    logging.info(
                        "Attempting to determine Lewis structure from NBO log")
                    mol = self.calculator.read_nbo_log(nbo_log, nbo_dir)
                except:
                    logging.info(
                        "Could not determing Lewis Structure from NBO calculation")
                    logging.info(
                        "Trying HCLI to determing best Lewis Structure")
                    try:
                        spcs = RMGSpecies().from_smiles(smiles)
                        spcs.generate_resonance_structures(
                            keep_isomorphic=False)
                        hlci = HLCI(spcs)
                        index = hlci.w.index(max(hlci.w))
                        mol = HLCI(spcs).species.molecule[index]
                    except:
                        mol = self.species.rmg_species[0]
                        logging.info(
                            "Could not determine best Lewis struture for species {}...using {} for structure".format(self.species, mol.smiles))

                logging.info("the best smiles for {} is {}".format(
                    self.species, mol.smiles))
                best_smiles = mol.smiles
                self.rmg_mol = mol
        else:
            best_smiles = smiles
            self.rmg_mol =  self.species.rmg_species[0]
                

        if options["calculate_fod"]:  # We will run an orca FOD job
            
            method_name = self.method_name
            # Update the lowest energy conformer 
            # with the lowest energy logfile
            label =  "{}_{}".format(smiles,method_name)
            conformer = Conformer(smiles=smiles)
            log = os.path.join(self.calculator.directory,"species",method_name,conformer.smiles,label+"_optfreq.log")
            assert os.path.exists(log),"It appears the calculation failed for {}...cannot calculate fod".format(conformer.smiles)
            atoms = read_log(log)
            mult = ccread(log,loglevel=logging.ERROR).mult
            conformer._ase_molecule = atoms
            conformer.update_coords_from("ase")
            conformer.rmg_molecule.multiplicity = mult
            self._calculate_fod(conformer=conformer,method_name=method_name)
            if dest2:
                fod_path = os.path.join(
                    self.directory,
                    "species",
                    method_name,
                    smiles,
                    smiles + '_fod.log'
                    )
                copyfile(fod_path,os.path.join(dest2,smiles + '_fod.log'))


        if options['run_arkane_dft']:
            ##### run Arkane
            logging.info("running arkane for {} with {} method".format(smiles,method_name))
            arkane_dir = os.path.join(
                self.directory,
                "species",
                method_name,
                smiles,
                'arkane'
            )
            if not os.path.exists(arkane_dir):
                os.makedirs(arkane_dir)

            label =  "{}_{}_optfreq".format(smiles,method_name)
            log_path = os.path.join(self.directory,"species",method_name,smiles,label+".log")
            assert os.path.exists(log_path)
            mult = ccread(log_path,loglevel=logging.ERROR).mult
            copyfile(log_path,os.path.join(arkane_dir,label + ".log"))
            molecule = self.rmg_mol
            # molecule = self.species.rmg_species[i]
            # if molecule.to_smiles() != smiles:
            #     for mol in self.species.rmg_species:
            #         if mol.to_smiles() == smiles:
            #             molecule = mol
            #             break
            molecule.multiplicity = mult
            arkane_calc = Arkane_Input(molecule=molecule,modelChemistry=method_name,directory=arkane_dir,gaussian_log_path=log_path)
            arkane_calc.write_molecule_file()
            arkane_calc.write_arkane_input(
                useAtomCorrections=options["use_atom_corrections"],useBondCorrections=options["use_bond_corrections"],
                useIsodesmicReactions=options["use_isodesmic_reactions"])
            yml_file = os.path.join(arkane_dir,'species','1.yml')
            if os.path.exists(yml_file):
                logging.info("It appears the arkane job has already been run")
            else:
                subprocess.Popen(
                    """python $RMGpy/Arkane.py arkane_input.py""", 
                    shell=True, cwd=arkane_calc.directory)
                while not os.path.exists(yml_file):
                    time.sleep(300)
            time.sleep(5)
            os.remove(os.path.join(arkane_dir,label + ".log"))
            dest = os.path.join(
                self.directory,
                "species",
                method_name,
                smiles,
                best_smiles + '.yml'
            )

            if os.path.exists(yml_file):
                arkane_out = os.path.join(arkane_dir,'output.py')
                arkane_supporting = os.path.join(arkane_dir,'supporting_information.csv')
                copyfile(yml_file,dest)
                if dest2:
                    copyfile(arkane_out,os.path.join(dest2,best_smiles + '_arkaneOutput.py'))
                    try:
                        copyfile(arkane_supporting,os.path.join(dest2,best_smiles + '_arkaneSupporting.csv'))
                        copyfile(yml_file,os.path.join(dest2,best_smiles + '.yml'))
                    except:
                        pass
                    #copyfile(log_path,os.path.join(dest2,label + '.log'))
                logging.info('Arkane job completed successfully!')

            else:
                logging.info('It appears the arkane job failed or was never run for {}'.format(smiles))

        if options["run_sp"]:

            label =  "{}_{}".format(smiles,method_name)
            conformer = Conformer(smiles=smiles)
            log = os.path.join(self.directory,"species",method_name,conformer.smiles,label+"_optfreq.log")
            assert os.path.exists(log), "It appears the calculation failed for {}...cannot perform single point calculations".format(conformer.smiles)
            complete, converged = self.calculator.verify_output_file(log)
            assert all([complete, converged]), "It appears the log file in incomplete or did not converge"
            atoms = read_log(log)
            mult = ccread(log,loglevel=logging.ERROR).mult
            conformer._ase_molecule = atoms
            conformer.update_coords_from("ase")
            conformer.rmg_molecule.multiplicity = mult

            single_point_method = self.calculator.settings["sp"]
            if isinstance(single_point_method,str):
                single_point_methods = [single_point_method]
            else: 
                single_point_methods = single_point_method
            
            sp_dir = os.path.join(self.directory,"species",method_name,conformer.smiles,"sp")
            if not os.path.exists(sp_dir):
                os.makedirs(sp_dir)

            currently_running = []
            processes = {}
            
            for sp_method in single_point_methods:
                process = Process(target=self.calculate_sp, args=(conformer,
                    sp_method))
                processes[process.name] = process

            # This loop will block until everything in processes 
            # has been started, and added to currently_running
            for name, process in list(processes.items()):
                process.start()
                currently_running.append(name)

            # This loop will block until everything in currently_running
            # has finished.
            while len(currently_running) > 0:
                for name, process in list(processes.items()):
                    if not (name in currently_running):
                        continue
                    if not process.is_alive():
                        currently_running.remove(name)
                time.sleep(15)

        if options['rotors']:

            single_point_method = self.calculator.settings["sp"]
                                            
            label = smiles + '_' + single_point_method
            sp_dir = os.path.join(self.directory,"species",method_name,smiles,"sp")
            log_path = os.path.join(sp_dir,label + '.log')
            complete, converged = self.calculator.verify_output_file(log_path)
            if not all([complete,converged]):
                logging.info("It seems the log file {} is incomplete or didnt converge".format(log_path))
            conformer = Conformer(smiles=self.rmg_mol)
            conformer.smiles = smiles
            assert check_isomorphic(conformer,log_path)
            conformer.rmg_molecule = self.rmg_molecule
            atoms = read_log(log_path)
            mult = ccread(log_path, loglevel=logging.ERROR).mult
            conformer._ase_molecule = atoms
            conformer.update_coords_from("ase")
            conformer.rmg_molecule.multiplicity = mult
            self.calculate_rotors(
                conformer, steps=36, step_size=10.0)

        if options['run_arkane_sp']:

            single_point_method = self.calculator.settings["sp"]
            if isinstance(single_point_method,str):
                single_point_methods = [single_point_method]
            else: 
                single_point_methods = single_point_method

            arkane_dir = os.path.join(
            self.directory,
            "species",
            method_name,
            smiles,
            "sp",
            'arkane'
            )

            if not os.path.exists(arkane_dir):
                os.makedirs(arkane_dir)

            for sp_method in single_point_methods:
                
                label = smiles + '_' + sp_method
                sp_dir = os.path.join(self.directory,"species",method_name,smiles,"sp")
                log_path = os.path.join(sp_dir,label + '.log')
                complete, converged = self.calculator.verify_output_file(log_path)

                if not all([complete,converged]):
                    logging.info("It seems the log file {} is incomplete or didnt converge".format(log_path))
                    continue
                conf = Conformer(smiles=self.rmg_mol.smiles)
                assert check_isomorphic(conf,log_path)
                dft_label =  "{}_{}_optfreq".format(smiles,method_name)
                dft_log = os.path.join(self.directory,"species",method_name,smiles,dft_label+".log")
                mult = ccread(dft_log,loglevel=logging.ERROR).mult
                molecule = self.rmg_mol
                # molecule = self.species.rmg_species[0]
                # if molecule.to_smiles() != smiles:
                #     for mol in self.species.rmg_species:
                #         if mol.to_smiles() == smiles:
                #             molecule = mol
                #             break
                molecule.multiplicity = mult
                copyfile(log_path,
                os.path.join(arkane_dir,label+'.log'))
                model_chem = sp_method
                arkane_calc = Arkane_Input(molecule=molecule,modelChemistry=model_chem,directory=arkane_dir,
                gaussian_log_path=log_path)
                arkane_calc.write_molecule_file()
                if 'G4' in sp_method:
                    #arkane_calc.write_arkane_input(frequency_scale_factor=0.9854,useIsodesmicReactions=False,n_reactions_max=50)
                    arkane_calc.write_arkane_input(frequency_scale_factor=0.9854,useAtomCorrections=options["use_atom_corrections"], 
                    useBondCorrections=options["use_bond_corrections"],useIsodesmicReactions=options["use_isodesmic_reactions"])
                else:
                    #arkane_calc.write_arkane_input(useIsodesmicReactions=True,n_reactions_max=50)
                    arkane_calc.write_arkane_input(
                        useAtomCorrections=options["use_atom_corrections"], useBondCorrections=options["use_bond_corrections"],
                        useIsodesmicReactions=options["use_isodesmic_reactions"])
                
                yml_file = os.path.join(arkane_dir,'species','1.yml')
                
                if os.path.exists(yml_file):
                    logging.info("It appears the arkane job has already been run")
                else:
                    logging.info("starting arkane calc for {}".format(label))
                    subprocess.Popen(
                        """python $RMGpy/Arkane.py arkane_input.py""", 
                        shell=True, cwd=arkane_calc.directory)
                    while not os.path.exists(yml_file):
                        time.sleep(300)
                time.sleep(5)
                os.remove(os.path.join(arkane_dir,label + ".log"))
                arkane_out = os.path.join(arkane_dir,'output.py')
                arkane_supporting = os.path.join(arkane_dir,'supporting_information.csv')

                if options['dir_path']:
                    dest = os.path.join(options['dir_path'],sp_method)

                if not os.path.exists(dest):
                    os.makedirs(dest)

                if os.path.exists(yml_file):
                    logging.info('Arkane job completed successfully!')
                    yml_dest = os.path.join(dest, best_smiles + '.yml')
                    copy = True
                    if os.path.exists(yml_dest):
                        with open(yml_dest, 'r') as f:
                            data = yaml.safe_load(f)
                            f.close()
                        H298_existing = float(data['thermo_data']['H298']['value'])
                        with open(yml_file, 'r') as f:
                            data = yaml.safe_load(f)
                            f.close()
                        H298 = float(data['thermo_data']['H298']['value'])
                        if H298_existing < H298:
                            copy = False
                            logging.info("{} already exists and has lower enthalpy, not copying to {}".format(
                                yml_dest, dest))
                    
                    if copy is True:
                        copyfile(yml_file,yml_dest)
                        try:
                            copyfile(arkane_out,os.path.join(dest,best_smiles + '_arkaneOutput.py'))
                            copyfile(arkane_supporting,os.path.join(dest,best_smiles + '_arkaneSupporting.csv'))
                        except:
                            pass
                else:
                    logging.info('It appears the arkane job failed or was never run for {}'.format(smiles))
                    continue





                

