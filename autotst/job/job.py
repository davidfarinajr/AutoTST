from autotst.calculator.gaussian import Gaussian
from autotst.calculator.orca import Orca
from autotst.calculator.vibrational_analysis import VibrationalAnalysis, percent_change
from autotst.calculator.statmech import StatMech
from autotst.reaction import Reaction, TS
from autotst.species import Species, Conformer
from autotst.geometry import Bond, Angle, Torsion, CisTrans, ChiralCenter
from cclib.io import ccread
import cclib
from rmgpy.molecule import Molecule as RMGMolecule
from rmgpy.species import Species as RMGSpecies
from rmgpy.reaction import Reaction as RMGReaction, ReactionError
from rmgpy.kinetics import PDepArrhenius, PDepKineticsModel
from rmgpy.data.rmg import RMGDatabase
import rmgpy
from ase.calculators.gaussian import Gaussian as ASEGaussian
from ase.atoms import Atom, Atoms
import ase
import rdkit.Chem.rdDistGeom
import rdkit.DistanceGeometry
from rdkit.Chem.Pharm3D import EmbedLib
from rdkit.Chem import AllChem
from rdkit import Chem
import rdkit
import os
import time
import yaml
from shutil import move, copyfile
import numpy as np
import pandas as pd
import subprocess
import multiprocessing
from multiprocessing import Process, Manager
import logging
FORMAT = "%(filename)s:%(lineno)d %(funcName)s %(levelname)s %(message)s"
logging.basicConfig(format=FORMAT, level=logging.INFO)


class Job():
    """
    A class to deal with the input and output of calculations
    """

    def __init__(
            self,
            species=None,
            reactions=None,
            load_species_from_reactions = False,
            calculator=None, # An AutoTST Gaussian calculator with proper directory settings
            sp_calculator=None,
            conformer_calculator = None, # an ASE Calculator object
            partition="general", # The partition to run calculations on
            discovery_username= None, # discovery user account (for checking on jobs in the queue)
            directory = None, # where to save your files 
            scratch = None, # a directory for temporary files generated by calculators
            exclude = None # nodes that you wish to exclude
            ):

        self.discovery_username = discovery_username
        if self.discovery_username is None:
            self.discovery_username = self.get_discovery_username()

        if species is not None:
            if isinstance(species,list):
                for s in species:
                    assert isinstance(s,Species),"species {} provided was not an AutoTST species object".format(s)
                self.species = species # sets self.species to list of AutoTST species
            elif isinstance(species,Species):
                self.species = [species] # sets self.species to list of a single AutoTST species 
            else:
                assert False, "Species must be an AutoTST species or a list or AutoTST species" 
        else:
            self.species = None

        if reactions is not None:
            if isinstance(reactions,list):
                for r in reactions:
                    assert isinstance(r,Reaction),"reaction {} provided was not an AutoTST reaction object".format(r)
                self.reactions = reactions # sets self.reactions to list of AutoTST reactions
                self.label = [reaction.label for reaction in self.reactions]
            elif isinstance(reactions,Reaction):
                self.reactions = [reactions] # sets self.reactions to list of a single AutoTST reaction 
                self.label = reactions.label
            else:
                assert False, "Reactions must be an AutoTST reaction of list of AutoTST reactions"
        else:
            self.reactions = None
            self.label = None

        if load_species_from_reactions is True:
            reaction_species = self.get_species_from_reactions()
            if self.species is None:
                self.species = reaction_species
            else:
                species = self.species
                for s in reaction_species:
                    if s not in species:
                        species.append(s)
                self.species = species

        assert isinstance(exclude, (type(None), str, list)), "Please provide a string or list of string descriptions of the nodes you wish to exclude"
        self.exclude = exclude
        self.calculator = calculator

        if self.calculator:
            if directory is None:
                logging.info("Job directory not specified...setting Job directory to calculator directory")
                self.directory = self.calculator.directory
            else:
                logging.info("Setting calculator directory to Job directory")
                self.directory = self.calculator.directory = directory
            
            if scratch is None:
                logging.info("Job scratch directory not specified...setting Job scratch to calculator scratch")
                self.scratch = self.calculator.scratch
            else:
                logging.info("Setting calculator scratch to Job scratch")
                self.scratch = self.calculator.scratch = scratch
        else:
            logging.info("No calculator specified")
            if directory is None:
                logging.info("No directory specified...setting directory to .")
                self.directory = '.'
            else:
                self.directory = directory
            if scratch is None:
                logging.info("No scratch directory specified...setting scratch to .")
                self.scratch = '.'
            else:
                self.scratch = scratch
        
        self.sp_calculator = sp_calculator
        if self.sp_calculator:
            assert isinstance(self.sp_calculator,Orca)

        self.conformer_calculator = conformer_calculator
        if self.conformer_calculator:
            self.conformer_calculator.directory = self.scratch
            
        self.partition = partition

        manager_overall = multiprocessing.Manager()
        manager_shell = multiprocessing.Manager()
        global overall_results
        global shell_results
        shell_results = manager_shell.dict()
        overall_results = manager_overall.dict()

        if self.scratch and not os.path.exists(self.scratch):
            os.makedirs(self.scratch)
        elif self.directory and not os.path.exists(self.directory):
            os.makedirs(self.directory)

    def __repr__(self):
        return "< Job '{}'>".format(self.label)

    def get_discovery_username(self):
        home = os.environ["HOME"]
        discovery_username = home.split('/')[-1]
        try:
            discovery_users = os.listdir('/scratch')
            if discovery_username not in discovery_users:
                logging.warning('It appears that {} is not a valid discovery username'.format(self.discovery_username))
        except:
            pass
        return discovery_username

    def get_species_from_reactions(self):
        assert self.reactions is not None,"reactions is empty"
        species = []
        for reaction in self.reactions:
            r, p = reaction.label.split("_")
            for react in r.split("+"):
                mol = Species(smiles=[react])
                if mol not in species:
                    species.append(mol)
            for prod in p.split("+"):
                mol = Species(smiles=[prod])
                if mol not in species:
                    species.append(mol)
        return species

    def read_log(self, file_path=None):
        """
        A helper method that allows one to easily parse log files
        """
        symbol_dict = {
            35: "Br",
            17: "Cl",
            9:  "F",
            8:  "O",
            7:  "N",
            6:  "C",
            1:  "H",
        }
        atoms = []

        parser = ccread(file_path, loglevel=logging.ERROR)

        for atom_num, coords in zip(parser.atomnos, parser.atomcoords[-1]):
            atoms.append(Atom(symbol=symbol_dict[atom_num], position=coords))

        return Atoms(atoms)

    def write_input(self, conformer, ase_calculator):
        """
        A helper method that will write an input file and move it to the correct scratch directory
        """

        ase_calculator.write_input(conformer.ase_molecule)
        try:
            os.makedirs(ase_calculator.scratch)
        except OSError:
            pass

        move(
            ase_calculator.label + ".com",
            os.path.join(
                ase_calculator.scratch,
                ase_calculator.label + ".com"
            ))

        move(
            ase_calculator.label + ".ase",
            os.path.join(
                ase_calculator.scratch,
                ase_calculator.label + ".ase"
            ))

    def check_complete(self, label, user, partition):
        """
        A method to determine if a job is still running
        """
        command = """squeue -n "{}" -u "{}" -p "{}" """.format(label,user,partition)
        output = subprocess.Popen(
            command,
            shell=True,
            stdout=subprocess.PIPE).communicate()[0]
        
        if len(output.split("\n")) <= 2:
            return True
        else:
            return False

#################################################################################

    def submit_conformer(self, conformer, restart=False):
        """
        A methods to submit a job based on the calculator and partition provided
        """
        assert conformer, "Please provide a conformer to submit a job"

        self.calculator.conformer = conformer
        ase_calculator = self.calculator.get_conformer_calc()
        self.write_input(conformer, ase_calculator)

        label = conformer.smiles + "_{}".format(conformer.index)
        file_path = os.path.join(ase_calculator.scratch, label)

        gaussian_scratch = os.environ['GAUSS_SCRDIR']
        if not os.path.exists(gaussian_scratch):
            os.makedirs(gaussian_scratch)

        os.environ["COMMAND"] = self.calculator.command  # only using gaussian for now
        os.environ["FILE_PATH"] = label
        
        attempted = False
        if os.path.exists(file_path + ".log"):
            attempted = True
            if not restart:
                logging.info(
                    "It appears that this job has already been run, not running it a second time.")

        if not self.check_complete(label=label, user=self.discovery_username, partition=self.partition):
            logging.info("It appears that {} is already in the queue...not submitting".format(label))
            return label

        if restart or not attempted:
            copy_molecule = conformer.rmg_molecule.copy()
            copy_molecule.deleteHydrogens()
            number_of_atoms = len(copy_molecule.atoms)
            if number_of_atoms >= 4:
                nproc = 2
            elif number_of_atoms >= 7:
                nproc = 4
            elif number_of_atoms >= 9:
                nproc = 6
            else:
                nproc = 8
            if restart:
                logging.info(
                    "Restarting calculations for {}.".format(conformer)
                )
            else:
                logging.info("Starting calculations for {}".format(conformer))
            subprocess.Popen(
                """sbatch --exclude=c5003,c3040 --job-name="{0}" --output="{0}.log" --error="{0}.slurm.log" -p {1} -N 1 -n 20 -t 12:00:00 --mem=60GB $AUTOTST/autotst/job/submit.sh""".format(
                    label, self.partition), shell=True, cwd=os.path.join(self.directory,"species",conformer.smiles,"conformers"))

        return label

    def check_isomorphic(self,conformer,log_path):
        """
        Compares whatever is in the log file  
        to the SMILES of the passed in 'conformer'
        """
        starting_molecule = RMGMolecule(SMILES=conformer.smiles)
        starting_molecule = starting_molecule.toSingleBonds()

        atoms = self.read_log(log_path)

        test_molecule = RMGMolecule()
        test_molecule.fromXYZ(
            atoms.arrays["numbers"],
            atoms.arrays["positions"]
        )
        if not starting_molecule.isIsomorphic(test_molecule):
            logging.info(
                "Output geometry of {} is not isomorphic with input geometry".format(log_path))
            return False
        else:
            logging.info(
            "{} was successful and was validated!".format(log_path))
            return True

    def calculate_conformer(self, conformer):
        """
        A method that optimizes a conformer and performs frequency analysis.
        If the conformer does not convergenge with tight convergence criteria,
        the convergence criteria is loosened to Gaussian's default criteria,
        and the optimization is rerun using the geometry from the last step of the Tight convergence optimization.
        Returns True if Gaussian log is complete and converged, and False if incomplete of unconverged.
        """

        self.calculator.conformer = conformer # this might be dangerous if running several of these at once?
        self.calculator.convergence = "Tight"
        calc = self.calculator.get_conformer_calc()
        scratch_dir = os.path.join(
            self.calculator.directory,
            "species",
            conformer.smiles,
            "conformers")
        f = calc.label + ".log"
        logging.info(
            "Submitting conformer calculation for {}".format(calc.label))
        label = self.submit_conformer(conformer)
        time.sleep(15)
        while not self.check_complete(label=label,user=self.discovery_username,partition=self.partition):
            time.sleep(15)

        complete, converged = self.calculator.verify_output_file(os.path.join(scratch_dir, f))

        if not complete:
            logging.info(
                "It seems that the file never completed for {} completed, running it again".format(calc.label))
            label = self.submit_conformer(conformer, restart=True)
            time.sleep(5)
            while not self.check_complete(label=label,user=self.discovery_username,partition=self.partition):
                time.sleep(15)

            complete, converged = self.calculator.verify_output_file(os.path.join(scratch_dir, f))

        #####

        if (complete and converged):
            return self.check_isomorphic(conformer=conformer,log_path=os.path.join(scratch_dir, f))

        if not complete: # try again
            logging.info(
                "It appears that {} was killed prematurely".format(calc.label))
            label = self.submit_conformer(conformer, restart=True)
            time.sleep(5)
            while not self.check_complete(label=label,user=self.discovery_username,partition=self.partition):
                time.sleep(15)

            complete, converged = self.calculator.verify_output_file(os.path.join(scratch_dir, f))
            if (complete and converged):
                return self.check_isomorphic(conformer=conformer,log_path=os.path.join(scratch_dir, f))
            elif not complete:
                logging.info(
                    "It appears that {} was killed prematurely or never completed :(".format(calc.label))
                return False
            # else complete but not converged

        if not converged:
            logging.info("{} did not converge, trying it as a looser convergence criteria".format(calc.label))

            logging.info("Resubmitting {} with default convergence criteria".format(conformer))
            atoms = self.read_log(os.path.join(scratch_dir, f))
            conformer.ase_molecule = atoms
            conformer.update_coords_from("ase")
            self.calculator.conformer = conformer # again, be careful setting this in multiple processes?
            self.calculator.convergence = ""
            calc = self.calculator.get_conformer_calc()

            logging.info("Removing the old log file that didn't converge, restarting from last geometry")
            os.remove(os.path.join(scratch_dir, f))

            label = self.submit_conformer(conformer)
            time.sleep(5)
            while not self.check_complete(label=label,user=self.discovery_username,partition=self.partition):
                time.sleep(15)

            if not os.path.exists(os.path.join(scratch_dir, f)):
                logging.info(
                "It seems that {}'s loose optimization was never run...".format(calc.label))
                return False

            complete, converged = self.calculator.verify_output_file(
                os.path.join(scratch_dir, f)
            )

            if not complete:
                logging.info(
                "It appears that {} was killed prematurely or never completed :(".format(calc.label))
                return False

            elif not converged:
                logging.info("{} failed second QM optimization :(".format(calc.label))
                return False

            else:
                return self.check_isomorphic(conformer=conformer,log_path=os.path.join(scratch_dir, f))

        raise Exception("Shoudn't reach here")

    def calculate_fod(self,conformer):
        """
        Runs finite temperaure DFT to determine the Fractional Occupation number weighted Density (FOD number).
        Uses Orca's the default functional, basis set, and smear temperature (TPSS, def2-TZVP, 5000 K).
        """
        # specify a directory for FOD input and output
        if isinstance(conformer,TS):
            fod_dir = os.path.join(self.directory, "ts",
                                   conformer.reaction_label, "fod")
            dir = os.path.join(self.directory, "ts",
                               conformer.reaction_label)
            label = conformer.reaction_label + "_fod"
        else:
            fod_dir = os.path.join(self.directory, "species", conformer.smiles, "fod")
            dir = os.path.join(self.directory, "species",
                               conformer.smiles)
            label = conformer.smiles + "_fod"

        if not os.path.exists(fod_dir):
            os.makedirs(fod_dir)

        # Get orca calculator instance 
        # for lowest energy conformer
        orca_calc = Orca(directory=fod_dir,conformer=conformer)
        orca_calc.write_fod_input()

        # Assign FOD label for calulation and filepath 
        # to save input and output
        file_path = os.path.join(fod_dir, label)

        # Assign environment variables with orca command and path
        os.environ["label"] = label

        # Do not run orca if log file is already there
        attempted = False
        complete = False

        if os.path.exists(file_path + ".log") or os.path.exists(os.path.join(dir, label + ".log")):
            attempted = True
            logging.info(
                "It appears that this job has already been run")
            if os.path.exists(os.path.join(dir, label + ".log")):
                if orca_calc.check_NormalTermination(os.path.join(dir, label + ".log")):
                    complete = True
                    logging.info("The FOD calculation completed!")
                    return True
            elif os.path.exists(file_path + ".log"):
                if orca_calc.check_NormalTermination(file_path + ".log"):
                    complete = True
                    logging.info("The FOD calculation completed!")
                    copyfile(
                        file_path + ".log", os.path.join(dir, label + ".log"))
                    return True
            else:
                logging.info("It appears the FOD job did not terminate normally! Trying FOD job again")
                complete = False

        # In log file does not exist, run Orca
        if not attempted or not complete:
            logging.info(
                "Starting FOD calculation for {}".format(conformer))
            subprocess.Popen(
                """sbatch --exclude=c5003,c3040 --job-name="{0}" --output="{0}.log" --error="{0}.slurm.log" -p test -N 1 -n 4 -t 10:00 --mem=5GB $AUTOTST/autotst/job/orca_submit.sh""".format(
                    label), shell=True, cwd=orca_calc.directory)
            time.sleep(5)
        # wait unitl the job is done
        while not self.check_complete(label=label, user=self.discovery_username, partition="test"):
            time.sleep(5)

        # If the log file exits, check to see if it terminated normally
        if os.path.exists(file_path + ".log"):
            if orca_calc.check_NormalTermination(file_path + ".log"):
                logging.info("The FOD calculation completed! The FOD log file is {}".format(
                    file_path + ".log"))
                copyfile(
                    file_path + ".log", os.path.join(dir, label + ".log"))
                return True
            else:
                logging.info("It appears the FOD job did not terminate normally! The FOD log file is {}".format(
                    file_path + ".log"))
                return False
        else:
            logging.info("It appears the FOD orca job never ran")
            return False

    def generate_sp_inputs(self,conformer):

        if self.sp_calculator is None:
            logging.info('A single point calculator was not specified')
            logging.info('Setting single point calc to orca calculator')
            directory = os.path.join(self.directory,"species",conformer.smiles,"sp")
            self.sp_calculator = Orca(directory=directory,conformer=conformer)

        if isinstance(self.sp_calculator,Orca):
            orca_calc = self.sp_calculator

            hf = orca_calc.write_sp_input(method='hf',basis='ma-def2-qzvpp')
        
            ex1 = orca_calc.write_extrapolation_input(option='ep3')
            # ex2 = orca_calc.write_extrapolation_input(option='3',method='ccsd(t)')

            # sp1 = orca_calc.write_sp_input(
            #     method='ccsd(t)', basis='aug-cc-pvtz', atom_basis={'Cl':'cc-pvt(+d)z','H':'cc-pvtz'}, use_atom_basis=True)
            # sp2 = orca_calc.write_sp_input(
            #     method='ccsd(t)', basis='aug-cc-pvqz', atom_basis={'Cl':'cc-pvq(+d)z','H':'cc-pvqz'}, use_atom_basis=True)

            if 35 not in conformer.ase_molecule.get_atomic_numbers():
                sp3 = orca_calc.write_sp_input(method='ccsd(t)-f12', basis='cc-pvdz-f12', atom_basis={'Cl': 'cc-pvt(+d)z'}, use_atom_basis=True)
                sp4 = orca_calc.write_sp_input(method='ccsd(t)-f12', basis='cc-pvtz-f12', atom_basis={'Cl': 'cc-pvq(+d)z'}, use_atom_basis=True)
                # labels = [hf,sp1,sp2,sp3,sp4,ex1,ex2]
                labels = [hf,ex1,sp3,sp4]
            else:
                # labels = [hf,sp1,sp2,ex1,ex2]
                labels = [hf,ex1]

            return labels
        
        else:
            logging.info("We currently do not support single point calculations for {}".format(self.sp_calculator))
            return None



    def calculate_sp(self,conformer,label):
    
        if self.sp_calculator is None:
            logging.info('A single point calculator was not specified')
            logging.info('Setting single point calc to orca calculator')
            directory = os.path.join(
                self.directory, "species", conformer.smiles, "sp")
            self.sp_calculator = Orca(directory=directory, conformer=conformer)

        if isinstance(self.sp_calculator,Orca):
            orca_calc = self.sp_calculator

        file_path = os.path.join(orca_calc.directory, label)

        os.environ["label"] = label

        # Do not run orca if log file is already there
        attempted = False
        complete = False
        if os.path.exists(file_path + ".log"):
            attempted = True
            logging.info(
                "It appears that this job already ran")
            if orca_calc.check_NormalTermination(file_path + ".log"):
                complete = True
                logging.info("The single point calculation completed! The log file is {}".format(
                    file_path + ".log"))
                copyfile(
                    file_path + ".log", os.path.join(self.directory, "species", conformer.smiles, label + ".log"))
                return True
                
            else:
                logging.info(
                    "It appears {} did not terminate normally! Rerunning calculation").format(file_path + ".log")
                complete = False

        # In log file does not exist, run Orca
        if not attempted or not complete:
            logging.info(
                "Starting {} single point calculation for {}".format(file_path,conformer))
            if int(self.sp_calculator.nprocs) >= 20:
                exclusive = '--exclusive'
            else:
                exclusive = ''
            subprocess.Popen(
                """sbatch {0} --exclude=c5003,c3040 --job-name="{1}" --output="{1}.log" --error="{1}.slurm.log" -p {2} -N 1 -n {3} -t {4} --mem={5} $AUTOTST/autotst/job/orca_submit.sh""".format(
                    exclusive,label,orca_calc.partition,orca_calc.nprocs,orca_calc.time,orca_calc.mem), shell=True, cwd=orca_calc.directory)  
            time.sleep(15)
            while not self.check_complete(label=label, user=self.discovery_username, partition=orca_calc.partition):
                time.sleep(15)
        
        # while not self.check_complete(label=label, user=self.discovery_username, partition=orca_calc.partition):
        #     time.sleep(15)

                # If the log file exits, check to see if it terminated normally
        if os.path.exists(file_path + ".log"):
            if orca_calc.check_NormalTermination(file_path + ".log"):
                logging.info("The single point calculation {} completed! The log file is {}".format(label,
                    file_path + ".log"))
                copyfile(
                    file_path + ".log", os.path.join(self.directory, "species", conformer.smiles, label + ".log"))
                return True
            else:
                logging.info("It appears the single point calculation {} did not terminate normally".format(label))
                return False
        else:
            logging.info("It appears the single point calculation {} never ran".format(label))
            return False

    def calculate_species(self, recalculate=False, calculate_fod=False, single_point=False):
        """
        Calculates the energy and harmonic frequencies of the lowest energy conformer of a species:
        1) Systematically generates low energy conformers for a given species with an ASE calculator.
        2) Optimizes each low energy conformer with provided Gaussian AutoTST calculator.
        3) Saves the gaussian optimization and frequency analysis log file for the lowest energy conformer of the species.
        """

        if self.species is not None:
            for species in self.species:
                assert isinstance(species,Species),"species {} provided was not an AutoTST species object".format(species)
        else:
            raise TypeError("Species cannot be None, please specify an AutoTST species to calculate")
        
        calculation_status = dict()
        for species in self.species:
            got_one = False
            if os.path.exists(os.path.join(self.calculator.directory,"species",species.smiles[0],species.smiles[0]+".log")) and not recalculate:
                existing_log = os.path.join(self.calculator.directory,"species",species.smiles[0],species.smiles[0]+".log")
                logging.info('It appears we already calculated this species')
                logging.info('Checking to see if the log is complete and converge...')
                complete, converged = self.calculator.verify_output_file(existing_log)
                
                if (complete and converged):
                    logging.info('creating a sample conformer for isomorphism test...')
                    conf = Conformer(smiles=species.smiles[0])
                    if self.check_isomorphic(conformer=conf, log_path=existing_log):
                        got_one = True
                        calculation_status[species] = True
                        logging.info('The existing log has been verified')
                    else:
                        logging.info('removing existing log and restarting calculation...')
                        os.remove(existing_log)
                    
                else:
                    logging.info('the existing log did not complete or converge')
                    logging.info('removing existing log and restarting calculation...')
                    os.remove(existing_log)

            if recalculate or not got_one:
                logging.info("Calculating geometries for {}".format(species))

                if self.conformer_calculator:
                    species.generate_conformers(ase_calculator=self.conformer_calculator)

                currently_running = []
                processes = {}
                for smiles, conformers in list(species.conformers.items()):

                    for conformer in conformers:

                        process = Process(target=self.calculate_conformer, args=(
                            conformer,))
                        processes[process.name] = process

                # This loop will block until everything in processes 
                # has been started, and added to currently_running
                for name, process in list(processes.items()):
                    while len(currently_running) >= 50:
                        for running in currently_running:
                            if not running.is_alive():
                                currently_running.remove(name)
                        time.sleep(15)
                    process.start()
                    currently_running.append(name)

                # This loop will block until everything in currently_running
                # has finished.
                while len(currently_running) > 0:
                    for name, process in list(processes.items()):
                        if not (name in currently_running):
                            continue
                        if not process.is_alive():
                            currently_running.remove(name)
                    time.sleep(15)

                results = []
                for smiles, conformers in list(species.conformers.items()):
                    for conformer in conformers:
                        scratch_dir = os.path.join(
                            self.calculator.directory,
                            "species",
                            conformer.smiles,
                            "conformers"
                        )
                        f = "{}_{}.log".format(conformer.smiles, conformer.index)
                        path = os.path.join(scratch_dir, f)
                        if not os.path.exists(path):
                            logging.info(
                                "It seems that {} was never run...".format(f))
                            continue
                        try:
                            parser = ccread(path, loglevel=logging.ERROR)
                            if parser is None:
                                logging.info(
                                    "Something went wrong when reading in results for {} using cclib...".format(f))
                                continue
                            energy = parser.scfenergies[-1]
                        except:
                            logging.info(
                                "The parser does not have an scf energies attribute, we are not considering {}".format(f))
                            energy = 1e5

                        results.append([energy, conformer, f])

                results = pd.DataFrame(
                    results, columns=["energy", "conformer", "file"]).sort_values("energy").reset_index()

                if results.shape[0] == 0:
                    logging.info(
                        "No conformer for {} was successfully calculated... :(".format(species))
                    calculation_status[species] = False
                    continue

                for index in range(results.shape[0]):
                    conformer = results.conformer[index]
                    lowest_energy_file = results.file[index]
                    break

                logging.info(
                    "The lowest energy conformer is {}".format(lowest_energy_file))

                lowest_energy_file_path = os.path.join(self.calculator.directory,"species",conformer.smiles,"conformers",lowest_energy_file)
                dest = os.path.join(self.calculator.directory,"species",conformer.smiles,conformer.smiles+".log")

                try:
                    copyfile(lowest_energy_file_path,dest)
                except IOError:
                    os.makedirs(os.path.dirname(dest))
                    copyfile(lowest_energy_file_path,dest)

                logging.info("The lowest energy file is {}! :)".format(
                    lowest_energy_file))
                calculation_status[species] = True

                parser = ccread(dest, loglevel=logging.ERROR)
                xyzpath = os.path.join(self.calculator.directory,"species",conformer.smiles,conformer.smiles+".xyz")
                parser.writexyz(xyzpath)

                logging.info("The lowest energy xyz file is {}!".format(
                    xyzpath))

            if calculate_fod:  # We will run an orca FOD job

                # Update the lowest energy conformer 
                # with the lowest energy logfile
                conformer = Conformer(smiles=species.smiles[0])
                log = os.path.join(self.calculator.directory,"species",conformer.smiles,conformer.smiles+".log")
                assert os.path.exists(log),"It appears the calculation failed for {}...cannot calculate fod".format(conformer.smiles)
                atoms = self.read_log(log)
                conformer.ase_molecule = atoms
                conformer.update_coords_from("ase")
                self.calculate_fod(conformer=conformer)

            if single_point:
                
                conformer = Conformer(smiles=species.smiles[0])
                log = os.path.join(self.directory,"species",conformer.smiles,conformer.smiles+".log")
                assert os.path.exists(log), "It appears the calculation failed for {}...cannot perform single point calculations".format(conformer.smiles)
                atoms = self.read_log(log)
                conformer.ase_molecule = atoms
                conformer.update_coords_from("ase")

                valence_dict = {
                1:1,
                6:4,
                7:5,
                8:6,
                9:7,
                17:7,
                35:7
                }

                total_valence = 0
                for atom in conformer.ase_molecule.get_atomic_numbers():
                    total_valence += valence_dict.get(atom)

                if total_valence <= 8:
                    nprocs = 2
                    mem = '12GB'
                    t = '01:00:00'
                    partition = 'test'
                elif total_valence >8 and total_valence <=14:
                    nprocs = 10
                    mem = '60GB'
                    t = '1-00:00:00'
                    partition = 'general'
                else:
                    nprocs = 20
                    mem = '110GB'
                    t = '1-00:00:00'
                    partition = 'general'        

                sp_dir = os.path.join(self.directory,"species",conformer.smiles,"sp")
                if not os.path.exists(sp_dir):
                    os.makedirs(sp_dir)
                if self.sp_calculator is None:
                    self.sp_calculator = Orca(directory=sp_dir,conformer=conformer,nprocs=nprocs,mem=mem,time=t,partition=partition)
                else:
                    if isinstance(self.sp_calculator,Orca):
                        self.sp_calculator.directory = sp_dir
                        self.sp_calculator.conformer = conformer
                        self.sp_calculator.nprocs = nprocs
                        self.sp_calculator.mem = mem
                        self.sp_calculator.mem_per_proc = self.sp_calculator.get_mem_per_proc()
                        self.sp_calculator.time = t
                        self.sp_calculator.partition = partition
                        self.sp_calculator.load_conformer_attributes()

                labels = self.generate_sp_inputs(conformer=conformer)

                if labels is not None:

                    currently_running = []
                    processes = {}

                    for label in labels:

                        process = Process(target=self.calculate_sp, args=(
                                conformer,label))
                        processes[process.name] = process

                    for name, process in list(processes.items()):
                        # while len(currently_running) >= 50:
                        #     for running in currently_running:
                        #         if not running.is_alive():
                        #             currently_running.remove(name)
                        process.start()
                        currently_running.append(name)

                    while len(currently_running) > 0:
                        for name, process in list(processes.items()):
                            if not (name in currently_running):
                                continue
                            if not process.is_alive():
                                currently_running.remove(name)
                else:
                    logging.info('Could not perform single point calcs because single point calculator provided is not currently supported')

        logging.info(calculation_status)
        if False in calculation_status.values() or len(calculation_status.values()) == 0:
            return False
        else:
            return True
#################################################################################

    def submit_transitionstate(self, transitionstate, opt_type, restart=False):
        """
        A methods to submit a job for a TS object based on a single calculator
        """
        assert transitionstate, "Please provide a transitionstate to submit a job"
        self.calculator.conformer = transitionstate
        if opt_type.lower() == "shell":
            ase_calculator = self.calculator.get_shell_calc()
            time = "24:00:00"
        elif opt_type.lower() == "center":
            ase_calculator = self.calculator.get_center_calc()
            time = "24:00:00"
        elif opt_type.lower() == "overall":
            ase_calculator = self.calculator.get_overall_calc()
            time = "24:00:00"
        elif opt_type.lower() == "irc":
            ase_calculator = self.calculator.get_irc_calc()
            time = "24:00:00"
            nproc = "14"

        if opt_type.lower() != "irc":
            copy_molecule = transitionstate.rmg_molecule.copy()
            copy_molecule.deleteHydrogens()
            number_of_atoms = len(copy_molecule.atoms)
            if number_of_atoms >= 4:
                nproc = 2
            elif number_of_atoms >= 7:
                nproc = 4
            elif number_of_atoms >= 9:
                nproc = 6
            else:
                nproc = 8

        self.write_input(transitionstate, ase_calculator)

        label = ase_calculator.label
        scratch = ase_calculator.scratch
        file_path = os.path.join(scratch, label)

        os.environ['GAUSS_SCRDIR'] = '.'
        os.environ["COMMAND"] = "g16"  # only using gaussian for now
        os.environ["FILE_PATH"] = label

        attempted = False
        if os.path.exists(file_path + ".log"):
            attempted = True
            logging.info("It appears that {} has already been attempted...".format(label))

        if not self.check_complete(label=label, user=self.discovery_username, partition=self.partition):
            logging.info("It appears that {} is already in the queue...not submitting".format(label))
            return label

        if (not attempted) or restart:
            subprocess.Popen(
                """sbatch --exclude=c5003,c3040 --job-name="{0}" --output="{0}.log" --error="{0}.slurm.log" -p {1} -N 1 -n 20 --mem=60GB -t {2} $AUTOTST/autotst/job/submit.sh""".format(
                    label, self.partition, time), shell=True, cwd=scratch)
        
        return label

    def calculate_transitionstate(self, transitionstate, opt_type, vibrational_analysis=True):
        """
        A method to perform the partial optimizations for a transitionstate and arrive
        at a final geometry. Returns True if we arrived at a final geometry, returns false
        if there is an error along the way.
        """

        opt_type = opt_type.lower()

        assert opt_type in ["shell", "overall"], "Only 'shell' and 'overall' are supported opt types"

        ts_identifier = "{}_{}_{}".format(
            transitionstate.reaction_label, transitionstate.direction, transitionstate.index)

        self.calculator.conformer = transitionstate

        if opt_type == "overall":
            file_path = "{}_{}_{}.log".format(transitionstate.reaction_label, transitionstate.direction, transitionstate.index)
        else:
            file_path = "{}_{}_{}_{}.log".format(transitionstate.reaction_label, transitionstate.direction, opt_type, transitionstate.index)

        file_path = os.path.join(
            self.directory, 
            "ts", 
            transitionstate.reaction_label, 
            "conformers", 
            file_path
        )


        if not os.path.exists(file_path):
            logging.info(
                "Submitting {} calculations for {}".format(opt_type.upper(),ts_identifier))
            label = self.submit_transitionstate(
                transitionstate, opt_type)    
            time.sleep(15)
            while not self.check_complete(label=label, user=self.discovery_username, partition=self.partition):
                time.sleep(15)

        else:
            logging.info(
                "It appears that we already have a complete {} log file for {}".format(opt_type.upper(), ts_identifier))

        complete, converged = self.calculator.verify_output_file(file_path)
        
        if not complete:
            logging.info(
                "It seems that the {} file never completed for {} never completed, running it again".format(opt_type.upper(), ts_identifier))
            label = self.submit_transitionstate(
                transitionstate, opt_type=opt_type.lower(), restart=True)
            time.sleep(15)
            while not self.check_complete(label,user=self.discovery_username,partition=self.partition):
                time.sleep(15)
            complete, converged = self.calculator.verify_output_file(file_path)

        if not (complete and converged):
            logging.info(
                "{} failed the {} optimization".format(ts_identifier, opt_type.upper()))
            if opt_type == 'overall':
                overall_results[ts_identifier] = False
            elif opt_type == 'shell':
                shell_results[ts_identifier] = False
            return False
        
        logging.info(
            "{} successfully completed the {} optimization!".format(ts_identifier, opt_type.upper()))
        transitionstate.ase_molecule = self.read_log(file_path)
        transitionstate.update_coords_from("ase")
        if opt_type == 'shell':
            shell_results[ts_identifier] = True
            return True

        elif opt_type == 'overall':
            logging.info(
                "Calculations for {} are complete and resulted in a normal termination!".format(ts_identifier))

            got_one = self.validate_transitionstate(transitionstate)
            if got_one:
                overall_results[ts_identifier] = True
                return True
            else:
                overall_results[ts_identifier] = False
                return False

    def check_irc_folder(self, reaction):
        """
        A method to check irc jobs to try to find an irc validated transition state
        Returns true if a validated ts is found, false otherwise
        """
        got_one = False
        irc_folder = os.path.join(
            self.directory, "ts", reaction.label, 'irc')
        if not os.path.exists(irc_folder):
            logging.info("It appears no irc jobs were run")
            return False
        else:
            irc_logs = [l for l in os.listdir(irc_folder) if l.endswith('.log') and 'slurm' not in l]
            irc_inputs = [l for l in os.listdir(irc_folder) if l.endswith('.com')]
            if len(irc_logs) == 0:
                if len(irc_inputs) == 0:
                    logging.info('The irc folder contains no logs or inputs')
                    return False
                else:
                    logging.info('There are no irc logs, but there are input files')
                    for i in irc_inputs:
                        direction = str(i.split('.com')[0].split('_')[-2])
                        index = int(i.split('.com')[0].split('_')[-1])
                        ts = reaction.ts[direction][0]
                        ts.index = index
                        self.calculator.conformer = ts
                        ase_calculator = self.calculator.get_irc_calc()
                        t = "24:00:00"
                        label = ase_calculator.label
                        scratch = ase_calculator.scratch
                        file_path = os.path.join(scratch, label)

                        os.environ['GAUSS_SCRDIR'] = '.'
                        os.environ["COMMAND"] = "g16"  # only using gaussian for now
                        os.environ["FILE_PATH"] = label
                        attempted = False
                        if os.path.exists(file_path + ".log"):
                            attempted = True
                            logging.info("It appears that {} has already been attempted...".format(label))

                        if not self.check_complete(label=label, user=self.discovery_username, partition=self.partition):
                            logging.info("It appears that {} is already in the queue...not submitting".format(label))
                            attempted = True

                        if not attempted:
                            subprocess.Popen(
                                """sbatch --exclude=c5003,c3040 --job-name="{0}" --output="{0}.log" --error="{0}.slurm.log" -p {1} -N 1 -n 20 --mem=60GB -t {2} $AUTOTST/autotst/job/submit.sh""".format(
                                    label, self.partition, t), shell=True, cwd=scratch)
                            time.sleep(5)

                        while not self.check_complete(label,user=self.discovery_username,partition=self.partition):
                            time.sleep(15)
                    
                    irc_logs = [l for l in os.listdir(irc_folder) if l.endswith('.log') and 'slurm' not in l]
                     
            for log in irc_logs:
                if 'forward' in log:
                    direction = 'forward'
                else:
                    direction = 'reverse'
                ts = reaction.ts[direction][0]
                ts.index = int(log.split('.log')[0].split('_')[-1])
                label = ts.reaction_label + '_' + direction + '_' + str(ts.index)
                self.calculator.conformer = ts
                result = self.calculator.validate_irc()
                if result:
                    logging.info("{} successfully validated via irc!".format(label))
                    path = os.path.join(self.directory, "ts", reaction.label, "conformers",label+'.log')
                    if os.path.exists(path):
                        got_one=True
                        copyfile(os.path.join(self.directory, "ts", self.reaction.label,"conformers", label +'.log'),
                                os.path.join(self.directory, "ts", self.reaction.label, self.reaction.label + ".log")
                                )
                        logging.info("TS log file validated from irc is {} :)".format(
                        os.path.join(self.directory, "ts",self.reaction.label, self.reaction.label + ".log")))
                        break
                    else:
                        logging.info("We have a TS validated from irc, but no completed log for {}".format(label))
                        logging.info("Checking the other irc logs...")
                        continue
                else:
                    logging.info(
                        "Could not validate {} from irc".format(label))
                    continue
            
            if got_one:
                return True
            else:
                logging.info(
                    "All of the ircs failed for {}".format(reaction.label))
                return False

    def calculate_reaction(self, recalculate=False, vibrational_analysis=True, calculate_fod=False):
        """
        A method to run calculations for all tranitionstates for a reaction
        """

        calculation_status = dict()
        for reaction in self.reactions:
            self.reaction = reaction

        #####################################
            # This block will search the directory for existing logs and irc calcs (if recalculate=False)
            # If there is an existing log, we will try to validate it with vibrational analysis
            # If vibrational analysis fails, we will check for irc logs to try to find and validate a ts
            # If there is no existing log, we will look for irc logs
            # If we cant find a validated TS, we will restart the calculation

            log_path = os.path.join(self.directory, "ts", self.reaction.label, self.reaction.label + ".log")
            irc_folder = os.path.join(self.directory, "ts", reaction.label, 'irc')
            if os.path.exists(log_path) and recalculate is False:
                logging.info("A log file already exists for reaction {}".format(reaction.label))
                logging.info("Trying to validate TS with existing log file through vibrational analysis...")
                lines = open(log_path).readlines()[0:10]
                direction = None
                for line in lines:
                    if 'Output=' in line:
                        if 'reverse' in line:
                            direction = 'reverse'
                            break
                        elif 'forward' in line:
                            direction = 'forward'
                            break
                
                validated = False
                if direction:
                    logging.info(
                        "The direction of the ts is {}".format(direction))
                    ts = reaction.ts[direction][0]
                    vib = VibrationalAnalysis(
                        transitionstate=ts, log_file=log_path, directory=self.directory)
                    validated = vib.validate_ts()
                else:
                    logging.info("Could not determine direction of ts from log file, trying both directions...")
                    directions = ['forward','reverse']
                    for direction in directions:
                        ts = reaction.ts[direction][0]
                        vib = VibrationalAnalysis(
                        transitionstate=ts, log_file=log_path, directory=self.directory)
                        validated = vib.validate_ts()
                        if validated:
                            logging.info('{} TS validated from vibrational analysis'.format(direction))
                            break
                
                if validated:
                    logging.info("Existing TS has been validated from vibrational analysis for reaction {}".format(reaction.label))
                    logging.info("The TS log file is {} :)".format(log_path))
                    calculation_status[reaction] = True
                    if calculate_fod:  # We will run an orca FOD job
                        # Update the lowest energy conformer 
                        # with the lowest energy logfile
                        atoms = self.read_log(log_path)
                        ts.ase_molecule = atoms
                        ts.update_coords_from("ase")
                        self.calculate_fod(conformer=ts)
                    continue
                else:
                    logging.info("Could not validate existing TS for {} through vibrational analysis...checking for irc jobs".format(
                        reaction.label))

                    got_one = self.check_irc_folder(reaction)
                    if got_one:
                        calculation_status[reaction]=True
                        if calculate_fod:  # We will run an orca FOD job
                            # Update the lowest energy conformer 
                            # with the lowest energy logfile
                            atoms = self.read_log(log_path)
                            ts.ase_molecule = atoms
                            ts.update_coords_from("ase")
                            self.calculate_fod(conformer=ts)
                        continue
                    else:
                        logging.info("Could not validate existing TS from vibrational analysis or irc...removing {}".format(log_path))
                        os.remove(log_path)
                        pass

            elif os.path.exists(irc_folder) and recalculate is False:
                logging.info(
                    "It appears irc jobs were run...trying to validate from existing ircs")
                got_one = self.check_irc_folder(reaction)
                if got_one:
                    calculation_status[reaction] = True
                    ts = reaction.ts["forward"][0] # get ts instance of reaction
                    if calculate_fod:  # We will run an orca FOD job
                        # Update the lowest energy conformer 
                        # with the lowest energy logfile
                        atoms = self.read_log(log_path)
                        ts.ase_molecule = atoms
                        ts.update_coords_from("ase")
                        self.calculate_fod(conformer=ts)                                                                    
                    continue
                else:
                    calculation_status[reaction] = False
                    logging.info(
                        "We could not find an irc validated transition state ")
                    pass

        #####################################

            logging.info("Calculating geometries for {}".format(self.reaction))

            if self.conformer_calculator:
                self.reaction.generate_conformers(ase_calculator=self.conformer_calculator)

            currently_running = []
            processes = {}
            opt_type = 'shell'

            for direction, transitionstates in list(self.reaction.ts.items()):

                for transitionstate in transitionstates:

                    process = Process(target=self.calculate_transitionstate, args=(
                        transitionstate,opt_type))
                    processes[process.name] = process

            for name, process in list(processes.items()):
                # while len(currently_running) >= 50:
                #     for running in currently_running:
                #         if not process.is_alive():
                #             currently_running.remove(name)
                process.start()
                currently_running.append(name)

            while len(currently_running) > 0:
                for name, process in list(processes.items()):
                    if not (name in currently_running):
                        continue
                    if not process.is_alive():
                        currently_running.remove(name)

            shell_energies = []
            for ts_identifier, result in shell_results.items():
                if not result:
                    logging.info("Shell calculation for {} FAILED".format(ts_identifier))
                    continue
                direction = str(ts_identifier.split('_')[-2])
                i = ts_identifier.split('_')[-1]
                ts = self.reaction.ts[direction][0]
                transitionstate = ts.copy()
                transitionstate.index = i
                f = "{}_{}_shell_{}.log".format(transitionstate.reaction_label, transitionstate.direction, transitionstate.index)
                log_path = os.path.join(self.calculator.directory, "ts",
                         self.reaction.label, "conformers", f)
                if not os.path.exists(log_path):
                    logging.info("It appears that {} failed...".format(log_path))
                    continue
                transitionstate.ase_molecule = self.read_log(log_path)
                transitionstate.update_coords_from("ase")
                try:
                    parser = ccread(log_path, loglevel=logging.ERROR)
                    if parser is None:
                        logging.info(
                            "Something went wrong when reading in results for {}...".format(f))
                        continue
                    energy = parser.scfenergies[-1]
                except:
                    logging.info(
                        "The parser does not have an scf energies attribute, we are not considering {}".format(f))
                    energy = 1e5

                shell_energies.append([energy, transitionstate, transitionstate.ase_molecule.get_all_distances(), log_path])

            shell_energies = pd.DataFrame(
                shell_energies, columns=["energy", "transitionstate", "distances", "file"]).sort_values("energy").reset_index()
      
            if shell_energies.shape[0] == 0:
                logging.info(
                    "No transition state for {} was successfully calculated... :(".format(self.reaction))
                continue
                calculation_status[self.reaction] = False

            # remove Conformers with similar structures based on RMSD calc
            tolerance = 0.1
            scratch_index = []
            unique_index = []
            for index in shell_energies.index:
                if index in scratch_index:
                    continue
                unique_index.append(index)
                scratch_index.append(index)
                distances = shell_energies.distances[index]
                for other_index in shell_energies.index:
                    if other_index in scratch_index:
                        continue

                    other_distances = shell_energies.distances[other_index]

                    if tolerance > np.sqrt((distances - other_distances)**2).mean():
                        scratch_index.append(other_index)

            drop_index = []
            for index in scratch_index:
                if index not in unique_index:
                    drop_index.append(index)

            shell_energies.drop(drop_index,inplace=True)
            shell_energies.reset_index(inplace=True)
            
            print shell_energies.values

            lowest_energy_file = shell_energies.file[0]
            lowest_energy_ts = shell_energies.transitionstate[0]
            lowest_energy_label = "{}_{}_{}".format(
                lowest_energy_ts.reaction_label, lowest_energy_ts.direction, lowest_energy_ts.index)

            logging.info("The lowest energy conformer after shell optimization is {}".format(lowest_energy_label))
            logging.info("Attempting overall optimization of {}".format(lowest_energy_label))

            result = self.calculate_transitionstate(transitionstate=lowest_energy_ts,opt_type='overall')
            
            if not result:
                if shell_energies.shape[0] > 1:
                    lowest_energy_file = shell_energies.file[1]
                    lowest_energy_ts = shell_energies.transitionstate[1]
                    lowest_energy_label = "{}_{}_{}".format(
                    lowest_energy_ts.reaction_label, lowest_energy_ts.direction, lowest_energy_ts.index)
                    logging.info("Attempting overall optimization of {}".format(lowest_energy_label))
                    result = self.calculate_transitionstate(transitionstate=lowest_energy_ts,opt_type='overall')

                    if not result:
                        if shell_energies.shape[0] > 2:
                            lowest_energy_file = shell_energies.file[2]
                            lowest_energy_ts = shell_energies.transitionstate[2]
                            lowest_energy_label = "{}_{}_{}".format(
                            lowest_energy_ts.reaction_label, lowest_energy_ts.direction, lowest_energy_ts.index)
                            logging.info("Attempting overall optimization of {}".format(lowest_energy_label))
                            result = self.calculate_transitionstate(transitionstate=lowest_energy_ts,opt_type='overall')

            if result:

                copyfile(
                    os.path.join(self.calculator.directory, "ts", self.reaction.label,
                                "conformers", lowest_energy_label + ".log"),
                    os.path.join(self.calculator.directory, "ts",
                                self.reaction.label, self.reaction.label + ".log")
                )
                logging.info("The lowest energy file is {}! :)".format(
                    lowest_energy_label + ".log"))
                calculation_status[self.reaction] = True

            else:
                calculation_status[self.reaction] = False
                continue
        
            if calculate_fod:  # We will run an orca FOD job

                # Update the lowest energy conformer
                # with the lowest energy logfile
                ts = reaction.ts["forward"][0] #get sample ts for reaction
                lowest_energy_file_path = os.path.join(self.calculator.directory, "ts",
                             self.reaction.label, self.reaction.label + ".log")
                atoms = self.read_log(lowest_energy_file_path)
                ts.ase_molecule = atoms
                ts.update_coords_from("ase")
                self.calculate_fod(conformer=ts)

        logging.info(calculation_status)
        if False in calculation_status.values() or len(calculation_status.values()) == 0:
            return False
        else:
            return True

    def validate_transitionstate(self, transitionstate, vibrational_analysis=True):

        validated = False
        if vibrational_analysis:
            vib = VibrationalAnalysis(
                transitionstate=transitionstate, directory=self.directory)
            validated = vib.validate_ts()
        if not validated:
            try:
                ts_forward = self.reaction.ts['forward'][0]
                ts_reverse = self.reaction.ts['reverse'][0]
                ts_forward.index = transitionstate.index
                ts_reverse.index = transitionstate.index
                ts_forward.direction = transitionstate.direction
                ts_reverse.direction = transitionstate.direction
                ts_list = [ts_forward,ts_reverse]
                for ts in ts_list:
                    vib = VibrationalAnalysis(
                transitionstate=ts, directory=self.directory)
                    validated = vib.validate_ts()
                    if validated:
                        logging.info("Validated via Vibrational Analysis")
                        return True
            except:
                pass

            logging.info("Could not validate with Vibrational Analysis... Running an IRC to validate instead...")
            label = self.submit_transitionstate(
                    transitionstate, opt_type="irc")
            time.sleep(15)
            while not self.check_complete(label=label,user=self.discovery_username,partition=self.partition):
                time.sleep(15)
            result = self.calculator.validate_irc()
            if result:
                logging.info("Validated via IRC")
                return True
            else:
                logging.info(
                    "Could not validate this conformer... trying the next lowest energy conformer")
                return False
        else:
            logging.info("Validated via Vibrational Analysis")
            return True

#################################################################################

    def submit_rotor(self, conformer, torsion_index, restart=False):
        """
        A methods to submit a job based on the conformer and the index of the torsion
        """
        assert conformer, "Please provide a conformer to submit a job"
        self.calculator.conformer = conformer
        ase_calculator = self.calculator.get_rotor_calc(torsion_index)

        copy_molecule = conformer.rmg_molecule.copy()
        copy_molecule.deleteHydrogens()
        number_of_atoms = len(copy_molecule.atoms)
        if number_of_atoms >= 4:
            nproc = 2
        elif number_of_atoms >= 7:
            nproc = 4
        elif number_of_atoms >= 9:
            nproc = 6
        else:
            nproc = 8

        self.write_input(conformer, ase_calculator)
        label = ase_calculator.label
        file_path = os.path.join(ase_calculator.scratch, ase_calculator.label)

        os.environ["COMMAND"] = "g16"  # only using gaussian for now
        os.environ["FILE_PATH"] = file_path

        attempted = False
        if os.path.exists(file_path + ".log"):
            attempted = True
            logging.info(
                "It appears that this job has already been run, not running it a second time.")

        if restart or not attempted:
            if restart:
                logging.info(
                    "Restarting calculations for {}.".format(conformer)
                )
            else:
                logging.info("Starting calculations for {}".format(conformer))

            if self.exclude:
                if isinstance(self.exclude, str):
                    command = """sbatch --exclude={2} --job-name="{0}" --output="{0}.slurm.log" --error="{0}.slurm.log" -p {1} -N 1 -n {3} -t 24:00:00 --mem=15GB $AUTOTST/autotst/job/submit.sh""".format(
                        label, self.partition, self.exclude, nproc)
                elif isinstance(self.exclude, list):
                    exc = ""
                    for e in self.exclude:
                        exc += e
                        exc += ","
                    exc = exc[:-1]
                    command = """sbatch --exclude={2} --job-name="{0}" --output="{0}.slurm.log" --error="{0}.slurm.log" -p {1} -N 1 -n {3} -t 24:00:00 --mem=15GB $AUTOTST/autotst/job/submit.sh""".format(
                        label, self.partition, exc, nproc)
            else:
                command = """sbatch --job-name="{0}" --output="{0}.slurm.log" --error="{0}.slurm.log" -p {1} -N 1 -n {2} -t 24:00:00 --mem=15GB $AUTOTST/autotst/job/submit.sh""".format(
                    label, self.partition, nproc)

            subprocess.call(command, shell=True)

        return label

    def calculate_rotors(self, conformer, steps=36, step_size=10.0):

        complete = {}
        calculators = {}
        verified = {}
        if len(conformer.torsions) == 0:
            logging.info("No torsions to run scans on.")
            return {}

        for torsion in conformer.torsions:
            label = self.submit_rotor(
                conformer, torsion.index)
            logging.info(label)
            complete[label] = False
            verified[label] = False

        done = False
        lowest_energy_label = None
        conformer_error = False

        while not done:
            for label in list(complete.keys()):
                if not self.check_complete(label=label,user=self.discovery_username,partition=self.partition):
                    continue
                if done:
                    continue
                complete[label] = True
                lowest_conf, continuous = self.verify_rotor( ##################################
                    conformer, label)
                if all([lowest_conf, continuous]):
                    verified[label] = True
                else:
                    verified[label] = False

                if not lowest_conf:
                    done = True
                    lowest_energy_label = label
                    conformer_error = True
                    continue
                elif all(complete.values()):
                    done = True

        if conformer_error:
            logging.info(
                "A lower energy conformer was found... Going to optimize this insted")
            for label in list(complete.keys()):
                subprocess.call("""scancel -n '{}'""".format(label), shell=True)
            if isinstance(conformer, TS):
                t = "ts"
                label = conformer.reaction_label
                file_name = os.path.join(
                    self.directory, t, label, "rotors", lowest_energy_label + ".log")
                t = "ts"
                direction =  conformer.direction
            else:
                t = "species"
                label = conformer.smiles
                file_name = os.path.join(
                    self.directory, "species",conformer.smiles , "rotors", lowest_energy_label + ".log")
            parser = ccread(file_name, loglevel=logging.ERROR)
            first_is_lowest, min_energy, atomnos, atomcoords = self.check_rotor_lowest_conf(
                parser=parser)
            symbol_dict = {
                35: "Br",
                17: "Cl",
                9:  "F",
                8:  "O",
                7:  "N",
                6:  "C",
                1:  "H",
            }
            atoms = []
            for atom_num, coords in zip(parser.atomnos, parser.atomcoords[-1]):
                atoms.append(
                    Atom(symbol=symbol_dict[atom_num], position=coords))
            conformer.ase_molecule = Atoms(atoms)
            conformer.update_coords_from("ase")
            for index in ["X", "Y", "Z"]: 
                # we do this because we now have a new conformer
                # the index starts at X and if another lower energy conformer arrises, we go to Y and so on
                if index != conformer.index:
                    logging.info("Setting index of {} to {}...".format(conformer, index))
                    conformer.index = index
                    break

            label = self.submit_conformer(conformer)
            time.sleep(5)

            while not self.check_complete(label=label, user=self.discovery_username, partition=self.partition):
                time.sleep(15)

            logging.info(
                "Reoptimization complete... performing hindered rotors scans again")

            if direction:
                file_name = "{}_{}_{}.log".format(label, direction, conformer.index)
            else:
                file_name = "{}_{}.log".format(label, conformer.index)

            file_path = os.path.join(
                self.directory, t, label, "conformers", file_name
            )
            complete, converged = self.calculator.verify_output_file(file_path)
            if not converged:
                logging.info("The new geometry was unable to converge... Hindered rotor calculations failed... :(")
                for key in verified.keys():
                    verified[key] = False
                return verified
            logging.info("The new geometry was able to successfully converge. Reattempting hindered rotor calculations")
            copyfile(
                file_path,
                os.path.join(self.directory, t, label, "{}.log".format(label))
            )
            conformer.ase_molecule = self.read_log(file_path)
            conformer.update_coords_from("ase")

            return self.calculate_rotors(conformer, steps, step_size)

        else:
            for label, boolean in list(verified.items()):
                if not boolean:
                    try:
                        if isinstance(conformer, TS):
                            file_path = os.path.join(
                                self.directory, "ts", conformer.reaction_label, "rotors")
                        else:
                            file_path = os.path.join(
                                self.directory, "species",conformer.smiles , "rotors")

                        os.mkdirs(os.path.join(file_path, failures))
                    except:
                        pass
                    move(
                        os.path.join(file_path, label + ".log"),
                        os.path.join(file_path, "failures",
                                     label + ".log")
                    )
            return verified

    def verify_rotor(self, conformer, label, steps=36, step_size=10.0):
        """
        A method that will 
        """

        if isinstance(conformer, TS):
            file_name = os.path.join(
                self.directory, "ts", conformer.reaction_label, "rotors", label  + ".log")
        elif isinstance(conformer, Conformer):
             file_name = os.path.join(
                self.directory, "species", conformer.smiles, "rotors", label  + ".log")           
        parser = cclib.io.ccread(file_name, loglevel=logging.ERROR)

        continuous = self.check_rotor_continuous(
            steps, step_size, parser=parser)
        [lowest_conf, energy, atomnos,
            atomcoords] = self.check_rotor_lowest_conf(parser=parser)
        #opt_count_check = self.check_rotor_opts(steps, parser=parser)
        #good_slope = self.check_rotor_slope(steps, step_size, parser=parser)

        return [lowest_conf, continuous]#, good_slope, opt_count_check] ### Previously used, but the second two checks were deemed unecessary

    def check_rotor_opts(self, steps, parser):


        #opt_indices = [i for i, status in enumerate(parser.optstatus) if status==2]
        opt_indices = [i for i, status in enumerate(
            parser.optstatus) if status > 1]
        opt_SCFEnergies = [parser.scfenergies[index] for index in opt_indices]

        n_opts_check = (steps + 1) == len(opt_SCFEnergies)

        return n_opts_check

    def check_rotor_slope(self, steps, step_size, parser, tol=0.1):


        opt_indices = [i for i, status in enumerate(
            parser.optstatus) if status in [2, 4]]
        opt_SCFEnergies = [parser.scfenergies[index] for index in opt_indices]

        max_energy = max(opt_SCFEnergies)
        min_energy = min(opt_SCFEnergies)

        max_slope = (max_energy - min_energy) / step_size
        slope_tol = tol*max_slope

        for i, energy in enumerate(opt_SCFEnergies):
            prev_energy = opt_SCFEnergies[i-1]
            slope = np.absolute((energy-prev_energy)/float(step_size))
            if slope > slope_tol:
                return False

        return True

    def check_rotor_continuous(self, steps, step_size, parser, tol=0.1):
        """
        A function that will check if a hindered rotor scan is continuous given the following:
        - steps (int): the number of steps performed in the scan (often 36)
        - step_size (float): the number of degress between each of the steps (often 10.0)
        - parser (cclib.parser.data.ccData_optdone_bool): the cclib parser that contains all of the info from the hindered rotor scan
        """

        assert isinstance(step_size, float)

        opt_indices = [i for i, status in enumerate(
            parser.optstatus) if status in [2, 4]]
        opt_SCFEnergies = [parser.scfenergies[index] for index in opt_indices]

        max_energy = max(opt_SCFEnergies)
        min_energy = min(opt_SCFEnergies)
        energy_tol = np.absolute(tol*(max_energy - min_energy))

        checked = [None for angle in range(0, 360)]

        continuous = True

        for step, energy in enumerate(opt_SCFEnergies):
            abs_theta = int(step*step_size)
            theta = abs_theta % 360

            mismatch = False

            if checked[theta] is None:
                checked[theta] = energy

            else:
                checked_energy = checked[theta]

                abs_diff = np.absolute(energy - checked_energy)

                if abs_diff > energy_tol:
                    mismatch = True
                    continuous = False
                    return False

        return continuous

    def check_rotor_lowest_conf(self, parser, tol=0.1):

        opt_indices = [i for i, status in enumerate(
            parser.optstatus) if status in [2, 4]]
        opt_SCFEnergies = [parser.scfenergies[index] for index in opt_indices]

        max_energy = max(opt_SCFEnergies)
        min_energy = min(opt_SCFEnergies)
        energy_tol = tol*(max_energy - min_energy)

        first_is_lowest = True  # Therefore...
        min_idx = 0
        min_energy = opt_SCFEnergies[min_idx]

        for i, energy in enumerate(opt_SCFEnergies):
            if min_energy - energy > energy_tol:
                min_energy = energy
                min_idx = i

        if min_idx != 0:
            first_is_lowest = False

        min_opt_idx = opt_indices[min_idx]

        atomnos = parser.atomnos
        atomcoords = parser.atomcoords[min_opt_idx]

        return [first_is_lowest, min_energy, atomnos, atomcoords]
